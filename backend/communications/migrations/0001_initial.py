# Generated by Django 5.0 on 2025-07-31 17:24

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('pipelines', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('channel_type', models.CharField(choices=[('email', 'Email'), ('whatsapp', 'WhatsApp'), ('linkedin', 'LinkedIn'), ('sms', 'SMS'), ('slack', 'Slack'), ('telegram', 'Telegram'), ('discord', 'Discord')], max_length=20)),
                ('external_account_id', models.CharField(help_text='UniPile account ID for this channel', max_length=255)),
                ('auth_status', models.CharField(choices=[('pending', 'Pending'), ('authenticated', 'Authenticated'), ('failed', 'Failed'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('connection_config', models.JSONField(default=dict, help_text='Channel-specific configuration and settings')),
                ('sync_settings', models.JSONField(default=dict, help_text='Message sync preferences and filters')),
                ('is_active', models.BooleanField(default=True)),
                ('message_count', models.IntegerField(default=0)),
                ('last_message_at', models.DateTimeField(blank=True, null=True)),
                ('last_sync_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='CampaignTracking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('campaign_type', models.CharField(choices=[('email_blast', 'Email Blast'), ('drip_campaign', 'Drip Campaign'), ('follow_up', 'Follow-up Sequence'), ('newsletter', 'Newsletter'), ('promotional', 'Promotional'), ('transactional', 'Transactional'), ('other', 'Other')], max_length=50)),
                ('target_audience', models.JSONField(default=dict, help_text='Audience targeting criteria and filters')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='draft', max_length=20)),
                ('scheduled_start', models.DateTimeField(blank=True, null=True)),
                ('actual_start', models.DateTimeField(blank=True, null=True)),
                ('scheduled_end', models.DateTimeField(blank=True, null=True)),
                ('actual_end', models.DateTimeField(blank=True, null=True)),
                ('target_send_count', models.IntegerField(default=0)),
                ('target_delivery_rate', models.DecimalField(decimal_places=2, default=Decimal('95.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('target_open_rate', models.DecimalField(decimal_places=2, default=Decimal('25.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('target_response_rate', models.DecimalField(decimal_places=2, default=Decimal('5.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('channels', models.ManyToManyField(related_name='campaigns', to='communications.channel')),
            ],
        ),
        migrations.CreateModel(
            name='CommunicationAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('messages_sent', models.IntegerField(default=0)),
                ('messages_received', models.IntegerField(default=0)),
                ('active_channels', models.IntegerField(default=0)),
                ('response_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Percentage of messages that received responses', max_digits=5)),
                ('engagement_score', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Overall engagement score (0-100)', max_digits=5)),
                ('metadata', models.JSONField(default=dict, help_text='Additional analytics data and breakdowns')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(blank=True, help_text='Leave blank for tenant-wide analytics', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='communications.channel')),
            ],
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_thread_id', models.CharField(blank=True, help_text="External platform's conversation/thread ID", max_length=255)),
                ('subject', models.CharField(blank=True, max_length=500)),
                ('status', models.CharField(choices=[('active', 'Active'), ('archived', 'Archived'), ('spam', 'Spam'), ('deleted', 'Deleted')], default='active', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=20)),
                ('message_count', models.IntegerField(default=0)),
                ('last_message_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional conversation metadata and tags')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to='communications.channel')),
                ('primary_contact_record', models.ForeignKey(blank=True, help_text='Primary contact for this conversation', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pipelines.record')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_message_id', models.CharField(blank=True, help_text="External platform's message ID", max_length=255)),
                ('direction', models.CharField(choices=[('inbound', 'Inbound'), ('outbound', 'Outbound')], max_length=20)),
                ('content', models.TextField()),
                ('subject', models.CharField(blank=True, max_length=500)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('read', 'Read'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('received_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Message metadata (attachments, formatting, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='communications.channel')),
                ('contact_record', models.ForeignKey(blank=True, help_text='Contact record associated with this message', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pipelines.record')),
                ('conversation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='communications.conversation')),
            ],
        ),
        migrations.CreateModel(
            name='DeliveryTracking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('attempt_count', models.IntegerField(default=0)),
                ('max_attempts', models.IntegerField(default=3)),
                ('first_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('last_error_code', models.CharField(blank=True, max_length=50)),
                ('last_error_message', models.TextField(blank=True)),
                ('error_history', models.JSONField(default=list, help_text='History of delivery errors and attempts')),
                ('total_delivery_time_ms', models.IntegerField(blank=True, help_text='Total time from send to delivery in milliseconds', null=True)),
                ('external_tracking_id', models.CharField(blank=True, max_length=255)),
                ('provider_response', models.JSONField(default=dict, help_text='Response from external delivery provider (UniPile, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_trackings', to='communications.channel')),
                ('message', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_tracking', to='communications.message')),
            ],
        ),
        migrations.CreateModel(
            name='CommunicationTracking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('tracking_type', models.CharField(choices=[('delivery', 'Delivery Tracking'), ('read', 'Read Receipt'), ('click', 'Link Click'), ('response', 'Response Received'), ('bounce', 'Bounce/Failure'), ('unsubscribe', 'Unsubscribe')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('tracked', 'Successfully Tracked'), ('failed', 'Tracking Failed'), ('expired', 'Tracking Expired')], default='pending', max_length=20)),
                ('event_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('user_agent', models.TextField(blank=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('tracking_data', models.JSONField(default=dict, help_text='Additional tracking data (click URLs, device info, etc.)')),
                ('response_time_ms', models.IntegerField(blank=True, help_text='Response time in milliseconds for delivery events', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_events', to='communications.channel')),
                ('conversation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tracking_events', to='communications.conversation')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_events', to='communications.message')),
            ],
        ),
        migrations.CreateModel(
            name='PerformanceMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('hour', models.IntegerField(blank=True, help_text='Hour for hourly metrics (0-23), null for daily metrics', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(23)])),
                ('messages_sent', models.IntegerField(default=0)),
                ('messages_delivered', models.IntegerField(default=0)),
                ('messages_failed', models.IntegerField(default=0)),
                ('messages_read', models.IntegerField(default=0)),
                ('responses_received', models.IntegerField(default=0)),
                ('delivery_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('open_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('response_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('bounce_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('avg_response_time_minutes', models.DecimalField(blank=True, decimal_places=2, help_text='Average response time in minutes', max_digits=8, null=True)),
                ('avg_read_time_seconds', models.DecimalField(blank=True, decimal_places=2, help_text='Average time spent reading messages', max_digits=8, null=True)),
                ('sentiment_positive_count', models.IntegerField(default=0)),
                ('sentiment_neutral_count', models.IntegerField(default=0)),
                ('sentiment_negative_count', models.IntegerField(default=0)),
                ('metadata', models.JSONField(default=dict, help_text='Additional custom metrics and breakdowns')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('campaign', models.ForeignKey(blank=True, help_text='Specific campaign, null for all campaigns', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='communications.campaigntracking')),
                ('channel', models.ForeignKey(blank=True, help_text='Specific channel, null for all channels', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to='communications.channel')),
            ],
        ),
        migrations.CreateModel(
            name='ReadTracking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_read_at', models.DateTimeField(blank=True, null=True)),
                ('last_read_at', models.DateTimeField(blank=True, null=True)),
                ('read_count', models.IntegerField(default=0)),
                ('time_to_first_read_minutes', models.IntegerField(blank=True, help_text='Minutes from delivery to first read', null=True)),
                ('total_read_time_seconds', models.IntegerField(blank=True, help_text='Total time spent reading message', null=True)),
                ('read_devices', models.JSONField(default=list, help_text='List of devices used to read the message')),
                ('read_locations', models.JSONField(default=list, help_text='Geographic locations where message was read')),
                ('read_receipt_enabled', models.BooleanField(default=True)),
                ('tracking_pixel_loaded', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='read_trackings', to='communications.channel')),
                ('message', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='read_tracking', to='communications.message')),
            ],
        ),
        migrations.CreateModel(
            name='ResponseTracking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('response_time_minutes', models.IntegerField(help_text='Minutes from original message to response')),
                ('response_received_at', models.DateTimeField()),
                ('response_sentiment', models.CharField(choices=[('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('response_category', models.CharField(blank=True, help_text='Categorization of response type (question, complaint, etc.)', max_length=50)),
                ('response_length', models.IntegerField(help_text='Character length of response')),
                ('contains_question', models.BooleanField(default=False)),
                ('contains_action_request', models.BooleanField(default=False)),
                ('response_analysis', models.JSONField(default=dict, help_text='AI analysis of response content and intent')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_trackings', to='communications.conversation')),
                ('original_message', models.ForeignKey(help_text='The original outbound message', on_delete=django.db.models.deletion.CASCADE, related_name='response_trackings', to='communications.message')),
                ('response_message', models.ForeignKey(help_text='The inbound response message', on_delete=django.db.models.deletion.CASCADE, related_name='responses_to', to='communications.message')),
            ],
        ),
        migrations.CreateModel(
            name='TenantUniPileConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dsn', models.CharField(help_text='UniPile Data Source Name', max_length=255)),
                ('access_token_encrypted', models.TextField(help_text='Encrypted UniPile access token')),
                ('webhook_secret', models.CharField(help_text='Webhook verification secret', max_length=255)),
                ('auto_create_contacts', models.BooleanField(default=True, help_text='Auto-create contact records from messages')),
                ('default_contact_status', models.CharField(default='new_lead', help_text='Default status for auto-created contacts', max_length=100)),
                ('sync_historical_days', models.PositiveIntegerField(default=30, help_text='Days of historical messages to sync on initial connection')),
                ('enable_real_time_sync', models.BooleanField(default=True, help_text='Enable real-time message sync via webhooks')),
                ('max_api_calls_per_hour', models.PositiveIntegerField(default=1000, help_text='Maximum UniPile API calls per hour')),
                ('is_active', models.BooleanField(default=True)),
                ('last_webhook_received', models.DateTimeField(blank=True, null=True)),
                ('webhook_failures', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('default_contact_pipeline', models.ForeignKey(blank=True, help_text='Default pipeline for auto-created contacts', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pipelines.pipeline')),
            ],
            options={
                'db_table': 'communications_tenantunipileconfig',
            },
        ),
        migrations.CreateModel(
            name='UserChannelConnection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('channel_type', models.CharField(choices=[('email', 'Email'), ('whatsapp', 'WhatsApp'), ('linkedin', 'LinkedIn'), ('sms', 'SMS'), ('slack', 'Slack'), ('telegram', 'Telegram'), ('discord', 'Discord')], max_length=20)),
                ('external_account_id', models.CharField(help_text='UniPile account ID', max_length=255)),
                ('account_name', models.CharField(help_text='Display name for the account', max_length=255)),
                ('auth_status', models.CharField(choices=[('pending', 'Pending'), ('authenticated', 'Authenticated'), ('failed', 'Failed'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('access_token', models.TextField(blank=True, help_text='Encrypted access token')),
                ('refresh_token', models.TextField(blank=True, help_text='Encrypted refresh token')),
                ('token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('connection_config', models.JSONField(default=dict, help_text='Channel-specific configuration (API keys, webhooks, etc.)')),
                ('is_active', models.BooleanField(default=True)),
                ('last_sync_at', models.DateTimeField(blank=True, null=True)),
                ('sync_error_count', models.IntegerField(default=0)),
                ('last_error', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channel_connections', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='channel',
            index=models.Index(fields=['channel_type', 'is_active'], name='communicati_channel_0358c3_idx'),
        ),
        migrations.AddIndex(
            model_name='channel',
            index=models.Index(fields=['auth_status'], name='communicati_auth_st_9799c8_idx'),
        ),
        migrations.AddIndex(
            model_name='channel',
            index=models.Index(fields=['created_by'], name='communicati_created_6d6dc7_idx'),
        ),
        migrations.AddIndex(
            model_name='channel',
            index=models.Index(fields=['last_message_at'], name='communicati_last_me_22daf7_idx'),
        ),
        migrations.AddIndex(
            model_name='campaigntracking',
            index=models.Index(fields=['status', 'actual_start'], name='communicati_status_2382a3_idx'),
        ),
        migrations.AddIndex(
            model_name='campaigntracking',
            index=models.Index(fields=['campaign_type'], name='communicati_campaig_2df9c3_idx'),
        ),
        migrations.AddIndex(
            model_name='campaigntracking',
            index=models.Index(fields=['created_by'], name='communicati_created_0d01fb_idx'),
        ),
        migrations.AddIndex(
            model_name='campaigntracking',
            index=models.Index(fields=['scheduled_start'], name='communicati_schedul_661b44_idx'),
        ),
        migrations.AddIndex(
            model_name='communicationanalytics',
            index=models.Index(fields=['date', 'channel'], name='communicati_date_b2f421_idx'),
        ),
        migrations.AddIndex(
            model_name='communicationanalytics',
            index=models.Index(fields=['date'], name='communicati_date_f2dc50_idx'),
        ),
        migrations.AddIndex(
            model_name='communicationanalytics',
            index=models.Index(fields=['channel'], name='communicati_channel_0d539c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='communicationanalytics',
            unique_together={('date', 'channel')},
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['channel', 'status'], name='communicati_channel_6884b9_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['primary_contact_record'], name='communicati_primary_a9f407_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['last_message_at'], name='communicati_last_me_5926ff_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['external_thread_id'], name='communicati_externa_a19726_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['priority', 'status'], name='communicati_priorit_27a6a2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='conversation',
            unique_together={('channel', 'external_thread_id')},
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['channel', 'direction'], name='communicati_channel_0ffaee_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['conversation', 'created_at'], name='communicati_convers_b5d10e_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['contact_record'], name='communicati_contact_988a44_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['status', 'direction'], name='communicati_status_4116cc_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['external_message_id'], name='communicati_externa_7b3b80_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['sent_at'], name='communicati_sent_at_91b226_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['contact_email'], name='communicati_contact_adf580_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverytracking',
            index=models.Index(fields=['channel', 'delivered_at'], name='communicati_channel_df8f50_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverytracking',
            index=models.Index(fields=['failed_at'], name='communicati_failed__0bb4a6_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverytracking',
            index=models.Index(fields=['attempt_count'], name='communicati_attempt_a42ec1_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverytracking',
            index=models.Index(fields=['external_tracking_id'], name='communicati_externa_7bce5b_idx'),
        ),
        migrations.AddIndex(
            model_name='communicationtracking',
            index=models.Index(fields=['message', 'tracking_type'], name='communicati_message_e6efc0_idx'),
        ),
        migrations.AddIndex(
            model_name='communicationtracking',
            index=models.Index(fields=['channel', 'event_timestamp'], name='communicati_channel_86698b_idx'),
        ),
        migrations.AddIndex(
            model_name='communicationtracking',
            index=models.Index(fields=['tracking_type', 'status'], name='communicati_trackin_45b2db_idx'),
        ),
        migrations.AddIndex(
            model_name='communicationtracking',
            index=models.Index(fields=['event_timestamp'], name='communicati_event_t_a2ff77_idx'),
        ),
        migrations.AddIndex(
            model_name='communicationtracking',
            index=models.Index(fields=['conversation', 'tracking_type'], name='communicati_convers_b3cc3e_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetrics',
            index=models.Index(fields=['date', 'hour', 'channel'], name='communicati_date_b339cd_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetrics',
            index=models.Index(fields=['date', 'campaign'], name='communicati_date_881924_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetrics',
            index=models.Index(fields=['channel', 'date'], name='communicati_channel_2581dd_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetrics',
            index=models.Index(fields=['delivery_rate'], name='communicati_deliver_88346f_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetrics',
            index=models.Index(fields=['response_rate'], name='communicati_respons_ba7aec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='performancemetrics',
            unique_together={('date', 'hour', 'channel', 'campaign')},
        ),
        migrations.AddIndex(
            model_name='readtracking',
            index=models.Index(fields=['channel', 'first_read_at'], name='communicati_channel_d2a14d_idx'),
        ),
        migrations.AddIndex(
            model_name='readtracking',
            index=models.Index(fields=['first_read_at'], name='communicati_first_r_9d54ca_idx'),
        ),
        migrations.AddIndex(
            model_name='readtracking',
            index=models.Index(fields=['read_count'], name='communicati_read_co_509712_idx'),
        ),
        migrations.AddIndex(
            model_name='responsetracking',
            index=models.Index(fields=['original_message', 'response_received_at'], name='communicati_origina_a0e027_idx'),
        ),
        migrations.AddIndex(
            model_name='responsetracking',
            index=models.Index(fields=['conversation', 'response_received_at'], name='communicati_convers_58e020_idx'),
        ),
        migrations.AddIndex(
            model_name='responsetracking',
            index=models.Index(fields=['response_time_minutes'], name='communicati_respons_a499f9_idx'),
        ),
        migrations.AddIndex(
            model_name='responsetracking',
            index=models.Index(fields=['response_sentiment'], name='communicati_respons_c45d68_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='responsetracking',
            unique_together={('original_message', 'response_message')},
        ),
        migrations.AddIndex(
            model_name='userchannelconnection',
            index=models.Index(fields=['user', 'channel_type'], name='communicati_user_id_9c3e93_idx'),
        ),
        migrations.AddIndex(
            model_name='userchannelconnection',
            index=models.Index(fields=['auth_status', 'is_active'], name='communicati_auth_st_575f1f_idx'),
        ),
        migrations.AddIndex(
            model_name='userchannelconnection',
            index=models.Index(fields=['last_sync_at'], name='communicati_last_sy_48bcf9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userchannelconnection',
            unique_together={('user', 'channel_type', 'external_account_id')},
        ),
    ]
