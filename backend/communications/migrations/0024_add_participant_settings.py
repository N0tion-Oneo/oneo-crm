# Generated by Django 5.0 on 2025-09-04 18:05

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('communications', '0023_remove_recordcommunicationlink'),
        ('pipelines', '0017_clear_stored_titles'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ParticipantOverride',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('never_auto_create', models.BooleanField(default=False, help_text='Never auto-create contact for this participant')),
                ('always_auto_create', models.BooleanField(default=False, help_text='Always auto-create contact (bypass other rules)')),
                ('prevent_auto_linking', models.BooleanField(default=False, help_text='Prevent automatic linking to records')),
                ('override_reason', models.TextField(blank=True, help_text='Reason for override settings')),
                ('internal_notes', models.TextField(blank=True, help_text='Internal notes about this participant')),
                ('requires_review', models.BooleanField(default=False, help_text='Flag for manual review')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('locked_to_record', models.ForeignKey(blank=True, help_text='Lock participant to specific record', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pipelines.record')),
                ('participant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='override_settings', to='communications.participant')),
            ],
            options={
                'verbose_name': 'Participant override',
                'verbose_name_plural': 'Participant overrides',
            },
        ),
        migrations.CreateModel(
            name='ParticipantSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auto_create_enabled', models.BooleanField(default=False, help_text='Enable automatic contact creation from participants')),
                ('creation_delay_hours', models.IntegerField(default=0, help_text='Hours to wait before auto-creating (0 = immediate)')),
                ('min_messages_before_create', models.IntegerField(default=1, help_text='Minimum messages required before auto-creation')),
                ('require_email', models.BooleanField(default=False, help_text='Require email address for auto-creation')),
                ('require_phone', models.BooleanField(default=False, help_text='Require phone number for auto-creation')),
                ('auto_link_by_domain', models.BooleanField(default=True, help_text='Automatically link participants to companies by email domain')),
                ('create_company_if_missing', models.BooleanField(default=False, help_text='Create company record if domain has enough participants')),
                ('min_employees_for_company', models.IntegerField(default=2, help_text='Minimum employees with same domain before creating company')),
                ('batch_size', models.IntegerField(default=50, help_text='Number of participants to process per batch')),
                ('max_creates_per_hour', models.IntegerField(default=100, help_text='Maximum auto-creations per hour')),
                ('enable_real_time_creation', models.BooleanField(default=False, help_text='Create contacts immediately vs batch processing')),
                ('check_duplicates_before_create', models.BooleanField(default=True, help_text='Check for existing contacts before creating')),
                ('duplicate_confidence_threshold', models.FloatField(default=0.8, help_text='Confidence threshold for duplicate detection (0.0-1.0)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('default_company_pipeline', models.ForeignKey(blank=True, help_text='Default pipeline for auto-created companies', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='participant_company_settings', to='pipelines.pipeline')),
                ('default_contact_pipeline', models.ForeignKey(blank=True, help_text='Default pipeline for auto-created contacts', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='participant_contact_settings', to='pipelines.pipeline')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Participant settings',
            },
        ),
        migrations.CreateModel(
            name='ParticipantBlacklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry_type', models.CharField(choices=[('domain', 'Domain'), ('email', 'Email Address'), ('email_pattern', 'Email Pattern'), ('phone', 'Phone Number'), ('name_pattern', 'Name Pattern')], help_text='Type of blacklist entry', max_length=20)),
                ('value', models.CharField(db_index=True, help_text='Value to match (domain, email, pattern, etc.)', max_length=255)),
                ('reason', models.TextField(blank=True, help_text='Reason for blacklisting')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this blacklist entry is active')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('added_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Participant blacklist entry',
                'verbose_name_plural': 'Participant blacklist entries',
                'indexes': [models.Index(fields=['entry_type', 'is_active'], name='communicati_entry_t_d89e35_idx'), models.Index(fields=['value'], name='communicati_value_d662a1_idx')],
                'unique_together': {('entry_type', 'value')},
            },
        ),
        migrations.CreateModel(
            name='ChannelParticipantSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_type', models.CharField(help_text='Channel type (email, whatsapp, linkedin, etc.)', max_length=50)),
                ('enabled', models.BooleanField(default=True, help_text='Enable auto-creation for this channel')),
                ('min_messages', models.IntegerField(default=1, help_text='Minimum messages for this channel')),
                ('require_two_way', models.BooleanField(default=False, help_text='Require two-way conversation')),
                ('config', models.JSONField(default=dict, help_text='Channel-specific configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('settings', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='channel_settings', to='communications.participantsettings')),
            ],
            options={
                'verbose_name': 'Channel participant settings',
                'verbose_name_plural': 'Channel participant settings',
                'unique_together': {('settings', 'channel_type')},
            },
        ),
    ]
