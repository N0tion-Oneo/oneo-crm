# Generated by Django 5.0 on 2025-09-09 12:32

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('communications', '0031_add_scheduling_system'),
        ('pipelines', '0018_add_assigned_user_ids_with_trigger'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MeetingType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('duration_minutes', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(480)])),
                ('location_type', models.CharField(choices=[('zoom', 'Zoom Meeting'), ('google_meet', 'Google Meet'), ('teams', 'Microsoft Teams'), ('phone', 'Phone Call'), ('in_person', 'In Person'), ('custom', 'Custom Location')], default='google_meet', max_length=20)),
                ('location_details', models.JSONField(default=dict, help_text='Additional location configuration (room, address, etc.)')),
                ('pipeline_stage', models.CharField(blank=True, help_text='Stage to set for new records', max_length=100)),
                ('booking_form_config', models.JSONField(default=dict, help_text='Which pipeline fields to show on booking form')),
                ('custom_questions', models.JSONField(default=list, help_text='Additional questions for booking form')),
                ('required_fields', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, help_text='Required pipeline fields for booking', size=None)),
                ('confirmation_template', models.TextField(blank=True, help_text='Email template for booking confirmation')),
                ('reminder_template', models.TextField(blank=True, help_text='Email template for meeting reminders')),
                ('cancellation_template', models.TextField(blank=True, help_text='Email template for cancellations')),
                ('allow_rescheduling', models.BooleanField(default=True)),
                ('allow_cancellation', models.BooleanField(default=True)),
                ('cancellation_notice_hours', models.IntegerField(default=24, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(168)])),
                ('send_reminders', models.BooleanField(default=True)),
                ('reminder_hours', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, help_text='Hours before meeting to send reminders (e.g., [24, 1])', size=None)),
                ('total_bookings', models.IntegerField(default=0)),
                ('total_completed', models.IntegerField(default=0)),
                ('total_cancelled', models.IntegerField(default=0)),
                ('total_no_shows', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pipeline', models.ForeignKey(blank=True, help_text='Pipeline for creating/updating records', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pipelines.pipeline')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meeting_types', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SchedulingLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.UUIDField(default=uuid.uuid4, help_text='Public URL slug', unique=True)),
                ('name', models.CharField(help_text='Internal name for this link', max_length=255)),
                ('public_name', models.CharField(blank=True, help_text='Public-facing name', max_length=255)),
                ('public_description', models.TextField(blank=True, help_text='Public-facing description')),
                ('auto_create_record', models.BooleanField(default=True, help_text='Automatically create/update records from bookings')),
                ('field_mapping', models.JSONField(default=dict, help_text='Map booking form fields to pipeline fields')),
                ('override_availability', models.JSONField(default=dict, help_text='Custom availability for this link')),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('max_bookings', models.IntegerField(blank=True, help_text='Maximum number of bookings allowed', null=True)),
                ('password', models.CharField(blank=True, help_text='Optional password protection', max_length=255)),
                ('allowed_emails', django.contrib.postgres.fields.ArrayField(base_field=models.EmailField(max_length=254), blank=True, default=list, help_text='Restrict to specific email addresses', size=None)),
                ('view_count', models.IntegerField(default=0)),
                ('booking_count', models.IntegerField(default=0)),
                ('conversion_rate', models.DecimalField(decimal_places=2, default=0, help_text='Booking rate percentage', max_digits=5)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('conversation', models.OneToOneField(blank=True, help_text='Conversation for tracking bookings', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scheduling_link', to='communications.conversation')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('meeting_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduling_links', to='communications.meetingtype')),
                ('pipeline', models.ForeignKey(blank=True, help_text='Target pipeline for creating records', null=True, on_delete=django.db.models.deletion.SET_NULL, to='pipelines.pipeline')),
            ],
        ),
        migrations.CreateModel(
            name='ScheduledMeeting',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('timezone', models.CharField(default='UTC', max_length=100)),
                ('calendar_event_id', models.CharField(blank=True, help_text='UniPile calendar event ID', max_length=255)),
                ('calendar_sync_status', models.CharField(choices=[('pending', 'Pending Sync'), ('synced', 'Synced'), ('failed', 'Sync Failed')], default='pending', max_length=50)),
                ('meeting_url', models.URLField(blank=True)),
                ('meeting_location', models.TextField(blank=True)),
                ('meeting_password', models.CharField(blank=True, max_length=100)),
                ('booking_data', models.JSONField(default=dict, help_text='Form data captured during booking')),
                ('booking_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('booking_user_agent', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('scheduled', 'Scheduled'), ('confirmed', 'Confirmed'), ('reminder_sent', 'Reminder Sent'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('no_show', 'No Show'), ('rescheduled', 'Rescheduled')], default='scheduled', max_length=20)),
                ('cancelled_at', models.DateTimeField(blank=True, null=True)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('reminder_sent_at', models.JSONField(default=list, help_text='List of timestamps when reminders were sent')),
                ('pre_meeting_notes', models.TextField(blank=True)),
                ('post_meeting_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('cancelled_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cancelled_meetings', to=settings.AUTH_USER_MODEL)),
                ('conversation', models.ForeignKey(help_text='Conversation for this meeting', on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_meetings', to='communications.conversation')),
                ('host', models.ForeignKey(help_text='Meeting host', on_delete=django.db.models.deletion.CASCADE, related_name='hosted_meetings', to=settings.AUTH_USER_MODEL)),
                ('meeting_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_meetings', to='communications.meetingtype')),
                ('participant', models.ForeignKey(help_text='External participant', on_delete=django.db.models.deletion.CASCADE, related_name='scheduled_meetings', to='communications.participant')),
                ('record', models.ForeignKey(blank=True, help_text='Associated pipeline record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scheduled_meetings', to='pipelines.record')),
                ('rescheduled_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rescheduled_from', to='communications.scheduledmeeting')),
                ('scheduling_link', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='scheduled_meetings', to='communications.schedulinglink')),
            ],
            options={
                'ordering': ['start_time'],
            },
        ),
        migrations.CreateModel(
            name='SchedulingProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timezone', models.CharField(default='UTC', max_length=100)),
                ('buffer_minutes', models.IntegerField(default=15, help_text='Buffer time between meetings in minutes', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)])),
                ('min_notice_hours', models.IntegerField(default=24, help_text='Minimum advance notice required for bookings', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(168)])),
                ('max_advance_days', models.IntegerField(default=60, help_text='Maximum days in advance for bookings', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('working_hours', models.JSONField(default=dict, help_text='Working hours per day of week')),
                ('calendar_sync_enabled', models.BooleanField(default=True, help_text='Check calendar for conflicts when calculating availability')),
                ('show_busy_slots', models.BooleanField(default=False, help_text='Show busy slots to external users (privacy setting)')),
                ('blocked_dates', models.JSONField(default=list, help_text='List of dates when unavailable')),
                ('override_dates', models.JSONField(default=dict, help_text='Specific date overrides with custom hours')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('channel', models.ForeignKey(help_text='Calendar channel for availability checking', limit_choices_to={'channel_type__in': ['calendar', 'gmail', 'outlook']}, on_delete=django.db.models.deletion.CASCADE, to='communications.channel')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scheduling_profiles', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AvailabilityOverride',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField()),
                ('override_type', models.CharField(choices=[('blocked', 'Completely Blocked'), ('custom_hours', 'Custom Hours'), ('extended_hours', 'Extended Hours')], max_length=20)),
                ('time_slots', models.JSONField(default=list)),
                ('reason', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability_overrides', to='communications.schedulingprofile')),
            ],
        ),
        migrations.AddIndex(
            model_name='meetingtype',
            index=models.Index(fields=['user', 'is_active'], name='communicati_user_id_0eea11_idx'),
        ),
        migrations.AddIndex(
            model_name='meetingtype',
            index=models.Index(fields=['pipeline'], name='communicati_pipelin_637228_idx'),
        ),
        migrations.AddIndex(
            model_name='meetingtype',
            index=models.Index(fields=['slug'], name='communicati_slug_0c20ca_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='meetingtype',
            unique_together={('user', 'slug')},
        ),
        migrations.AddIndex(
            model_name='schedulinglink',
            index=models.Index(fields=['slug'], name='communicati_slug_2692b0_idx'),
        ),
        migrations.AddIndex(
            model_name='schedulinglink',
            index=models.Index(fields=['meeting_type', 'is_active'], name='communicati_meeting_324bed_idx'),
        ),
        migrations.AddIndex(
            model_name='schedulinglink',
            index=models.Index(fields=['expires_at'], name='communicati_expires_4cc6c8_idx'),
        ),
        migrations.AddIndex(
            model_name='schedulinglink',
            index=models.Index(fields=['created_by'], name='communicati_created_4cda21_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledmeeting',
            index=models.Index(fields=['start_time', 'status'], name='communicati_start_t_5a6178_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledmeeting',
            index=models.Index(fields=['participant'], name='communicati_partici_a27ddc_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledmeeting',
            index=models.Index(fields=['host', 'start_time'], name='communicati_host_id_53bdcf_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledmeeting',
            index=models.Index(fields=['record'], name='communicati_record__49c2de_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledmeeting',
            index=models.Index(fields=['status'], name='communicati_status_3cfdb4_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledmeeting',
            index=models.Index(fields=['calendar_event_id'], name='communicati_calenda_f84330_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledmeeting',
            index=django.contrib.postgres.indexes.GinIndex(fields=['booking_data'], name='communicati_booking_1aae40_gin'),
        ),
        migrations.AddIndex(
            model_name='schedulingprofile',
            index=models.Index(fields=['user', 'is_active'], name='communicati_user_id_7d7b1a_idx'),
        ),
        migrations.AddIndex(
            model_name='schedulingprofile',
            index=models.Index(fields=['channel'], name='communicati_channel_f61ab2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='schedulingprofile',
            unique_together={('user', 'channel')},
        ),
        migrations.AddIndex(
            model_name='availabilityoverride',
            index=models.Index(fields=['profile', 'date'], name='communicati_profile_8de6ea_idx'),
        ),
        migrations.AddIndex(
            model_name='availabilityoverride',
            index=models.Index(fields=['date'], name='communicati_date_4801a5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='availabilityoverride',
            unique_together={('profile', 'date')},
        ),
    ]
