# Generated by Django 5.0 on 2025-08-07 21:11

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('pipelines', '0006_add_field_soft_delete'),
        ('tenants', '0002_tenantmaintenance'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DuplicateRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Human-readable name for this duplicate rule', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of what this rule detects')),
                ('logic', models.JSONField(default=dict, help_text='AND/OR logic for field matching in JSON format')),
                ('action_on_duplicate', models.CharField(choices=[('warn', 'Show Warning'), ('block', 'Block Creation'), ('merge_prompt', 'Prompt to Merge')], default='warn', help_text='Action to take when duplicates are detected', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('pipeline', models.ForeignKey(help_text='Pipeline this rule applies to', on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_rules', to='pipelines.pipeline')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_rules', to='tenants.tenant')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DuplicateMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence_score', models.FloatField(help_text='Overall confidence score (0.0-1.0) for this duplicate match')),
                ('field_scores', models.JSONField(help_text='Individual field match scores and details')),
                ('matched_fields', models.JSONField(help_text='List of fields that contributed to the match')),
                ('detection_method', models.CharField(help_text='Primary algorithm used for detection', max_length=100)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('confirmed', 'Confirmed Duplicate'), ('false_positive', 'False Positive'), ('merged', 'Records Merged'), ('ignored', 'Ignored'), ('auto_resolved', 'Auto-Resolved'), ('resolved', 'Resolved')], default='pending', max_length=50)),
                ('resolution_notes', models.TextField(blank=True)),
                ('auto_resolution_reason', models.TextField(blank=True)),
                ('record1', models.ForeignKey(help_text='First record in the duplicate pair', on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_matches_1', to='pipelines.record')),
                ('record2', models.ForeignKey(help_text='Second record in the duplicate pair', on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_matches_2', to='pipelines.record')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_duplicates', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_matches', to='tenants.tenant')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_matches', to='duplicates.duplicaterule')),
            ],
            options={
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='DuplicateAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('records_processed', models.IntegerField(default=0)),
                ('duplicates_detected', models.IntegerField(default=0)),
                ('false_positives', models.IntegerField(default=0)),
                ('true_positives', models.IntegerField(default=0)),
                ('avg_confidence_score', models.FloatField(default=0.0)),
                ('processing_time_ms', models.IntegerField(default=0)),
                ('field_performance', models.JSONField(default=dict, help_text='Performance metrics by field')),
                ('algorithm_performance', models.JSONField(default=dict, help_text='Performance metrics by matching algorithm')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_analytics', to='tenants.tenant')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_analytics', to='duplicates.duplicaterule')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='DuplicateRuleTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Test case name', max_length=255)),
                ('record1_data', models.JSONField(help_text='First record data for testing')),
                ('record2_data', models.JSONField(help_text='Second record data for testing')),
                ('expected_result', models.BooleanField(help_text='Expected duplicate detection result')),
                ('last_test_result', models.BooleanField(blank=True, null=True)),
                ('last_test_at', models.DateTimeField(blank=True, null=True)),
                ('test_details', models.JSONField(default=dict, help_text='Detailed test execution results')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_test_cases', to='duplicates.duplicaterule')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='URLExtractionRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Human-readable name (e.g., 'LinkedIn Profile')", max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of what this rule extracts')),
                ('domain_patterns', models.JSONField(default=list, help_text="List of domain patterns to match (e.g., ['linkedin.com', '*.linkedin.com'])")),
                ('extraction_pattern', models.CharField(help_text='Regex pattern to extract identifier from URL', max_length=500)),
                ('extraction_format', models.CharField(help_text="Format template for extracted value (e.g., 'linkedin:{}')", max_length=100)),
                ('case_sensitive', models.BooleanField(default=False)),
                ('remove_protocol', models.BooleanField(default=True)),
                ('remove_www', models.BooleanField(default=True)),
                ('remove_query_params', models.BooleanField(default=True)),
                ('remove_fragments', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_url_extraction_rules', to='tenants.tenant')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DuplicateDetectionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_duplicates_found', models.IntegerField(default=0)),
                ('detection_summary', models.JSONField(default=dict, help_text='Summary of detection results including rules triggered and matched records')),
                ('duplicate_match_ids', models.JSONField(default=list, help_text='List of DuplicateMatch IDs created from this detection')),
                ('requires_review', models.BooleanField(default=False)),
                ('is_processed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pipeline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_detection_results', to='pipelines.pipeline')),
                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_detection_results', to='pipelines.record')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_detection_results', to='tenants.tenant')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['tenant', 'pipeline'], name='duplicates__tenant__37a3a5_idx'), models.Index(fields=['tenant', 'requires_review'], name='duplicates__tenant__ee89b9_idx'), models.Index(fields=['created_at'], name='duplicates__created_4324db_idx')],
            },
        ),
        migrations.CreateModel(
            name='DuplicateExclusion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for excluding this pair from duplicate detection')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('record1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exclusions_1', to='pipelines.record')),
                ('record2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exclusions_2', to='pipelines.record')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_exclusions', to='tenants.tenant')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['tenant', 'record1'], name='duplicates__tenant__9db855_idx'), models.Index(fields=['tenant', 'record2'], name='duplicates__tenant__97507f_idx')],
                'unique_together': {('tenant', 'record1', 'record2')},
            },
        ),
        migrations.CreateModel(
            name='DuplicateResolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_taken', models.CharField(choices=[('merge', 'Merge Records'), ('keep_both', 'Keep Both Records'), ('ignore', 'Mark as False Positive'), ('manual_review', 'Requires Manual Review')], max_length=50)),
                ('resolved_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('data_changes', models.JSONField(default=dict, help_text='Record of data changes made during resolution')),
                ('duplicate_match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resolutions', to='duplicates.duplicatematch')),
                ('merged_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='merged_resolutions', to='pipelines.record')),
                ('primary_record', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='primary_resolutions', to='pipelines.record')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_resolutions', to='tenants.tenant')),
            ],
            options={
                'ordering': ['-resolved_at'],
                'indexes': [models.Index(fields=['tenant', 'action_taken'], name='duplicates__tenant__37edd7_idx'), models.Index(fields=['resolved_at'], name='duplicates__resolve_3c8eca_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='duplicaterule',
            index=models.Index(fields=['tenant', 'pipeline'], name='duplicates__tenant__934c24_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicaterule',
            index=models.Index(fields=['tenant', 'is_active'], name='duplicates__tenant__163684_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='duplicaterule',
            unique_together={('tenant', 'name')},
        ),
        migrations.AddIndex(
            model_name='duplicatematch',
            index=models.Index(fields=['tenant', 'status'], name='duplicates__tenant__2b788a_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicatematch',
            index=models.Index(fields=['tenant', 'detected_at'], name='duplicates__tenant__775582_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicatematch',
            index=models.Index(fields=['confidence_score'], name='duplicates__confide_a6dd58_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='duplicatematch',
            unique_together={('tenant', 'record1', 'record2')},
        ),
        migrations.AddIndex(
            model_name='duplicateanalytics',
            index=models.Index(fields=['tenant', 'date'], name='duplicates__tenant__650ef1_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicateanalytics',
            index=models.Index(fields=['rule', 'date'], name='duplicates__rule_id_2e8ce6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='duplicateanalytics',
            unique_together={('tenant', 'rule', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='duplicateruletest',
            unique_together={('rule', 'name')},
        ),
        migrations.AddIndex(
            model_name='urlextractionrule',
            index=models.Index(fields=['tenant', 'is_active'], name='duplicates__tenant__4575e4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='urlextractionrule',
            unique_together={('tenant', 'name')},
        ),
    ]
