# Generated by Django 5.0 on 2025-08-01 15:06

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('pipelines', '0002_remove_field_placeholder_remove_field_width'),
        ('tenants', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='DuplicateRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Human-readable name for this duplicate rule', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of what this rule detects')),
                ('is_active', models.BooleanField(default=True)),
                ('action_on_duplicate', models.CharField(choices=[('block', 'Block Creation'), ('warn', 'Show Warning'), ('merge_prompt', 'Prompt to Merge'), ('auto_merge', 'Auto-Merge'), ('allow', 'Allow with Flag')], default='warn', help_text='Action to take when duplicates are detected', max_length=50)),
                ('confidence_threshold', models.FloatField(default=0.8, help_text='Minimum confidence score (0.0-1.0) to consider records as duplicates')),
                ('auto_merge_threshold', models.FloatField(default=0.95, help_text='Confidence threshold for automatic merging (if enabled)')),
                ('enable_fuzzy_matching', models.BooleanField(default=True, help_text='Enable fuzzy text matching algorithms')),
                ('enable_phonetic_matching', models.BooleanField(default=True, help_text='Enable phonetic matching for names (Soundex, Metaphone)')),
                ('ignore_case', models.BooleanField(default=True, help_text='Ignore case when comparing text fields')),
                ('normalize_whitespace', models.BooleanField(default=True, help_text='Normalize whitespace and trim fields before comparison')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('pipeline', models.ForeignKey(help_text='Pipeline this rule applies to', on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_rules', to='pipelines.pipeline')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_rules', to='tenants.tenant')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DuplicateMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('confidence_score', models.FloatField(help_text='Overall confidence score (0.0-1.0) for this duplicate match')),
                ('field_scores', models.JSONField(help_text='Individual field match scores and details')),
                ('matched_fields', models.JSONField(help_text='List of fields that contributed to the match')),
                ('detection_method', models.CharField(help_text='Primary algorithm used for detection', max_length=100)),
                ('detected_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('confirmed', 'Confirmed Duplicate'), ('false_positive', 'False Positive'), ('merged', 'Records Merged'), ('ignored', 'Ignored'), ('auto_resolved', 'Auto-Resolved')], default='pending', max_length=50)),
                ('resolution_notes', models.TextField(blank=True, help_text='Notes about how this duplicate was resolved')),
                ('auto_resolution_reason', models.TextField(blank=True, help_text='Reason for automatic resolution (if applicable)')),
                ('record1', models.ForeignKey(help_text='First record in the duplicate pair', on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_matches_1', to='pipelines.record')),
                ('record2', models.ForeignKey(help_text='Second record in the duplicate pair', on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_matches_2', to='pipelines.record')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_duplicates', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_matches', to='tenants.tenant')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='duplicates.duplicaterule')),
            ],
            options={
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='DuplicateFieldRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_type', models.CharField(choices=[('exact', 'Exact Match'), ('case_insensitive', 'Case Insensitive'), ('fuzzy', 'Fuzzy Match'), ('soundex', 'Soundex Match'), ('metaphone', 'Metaphone Match'), ('levenshtein', 'Levenshtein Distance'), ('jaro_winkler', 'Jaro-Winkler Similarity'), ('email_domain', 'Email Domain Match'), ('phone_normalized', 'Normalized Phone Match'), ('partial', 'Partial Match'), ('regex', 'Regular Expression Match'), ('cosine', 'Cosine Similarity'), ('jaccard', 'Jaccard Similarity')], max_length=50)),
                ('match_threshold', models.FloatField(default=0.8, help_text='Threshold for fuzzy matching (0.0-1.0, higher = more strict)')),
                ('weight', models.FloatField(default=1.0, help_text='Weight of this field in overall duplicate score calculation')),
                ('is_required', models.BooleanField(default=False, help_text='Whether this field must match for records to be considered duplicates')),
                ('preprocessing_rules', models.JSONField(default=dict, help_text='Field-specific preprocessing rules (normalization, cleanup, etc.)')),
                ('custom_regex', models.TextField(blank=True, help_text='Custom regex pattern for regex match type')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('field', models.ForeignKey(help_text='Pipeline field to use for duplicate detection', on_delete=django.db.models.deletion.CASCADE, to='pipelines.field')),
                ('duplicate_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='field_rules', to='duplicates.duplicaterule')),
            ],
            options={
                'ordering': ['-weight', 'field__name'],
            },
        ),
        migrations.CreateModel(
            name='DuplicateExclusion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField(help_text='Reason for excluding this pair')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('record1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exclusions_1', to='pipelines.record')),
                ('record2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exclusions_2', to='pipelines.record')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_exclusions', to='tenants.tenant')),
                ('rule', models.ForeignKey(blank=True, help_text='Specific rule to exclude, or null for all rules', null=True, on_delete=django.db.models.deletion.CASCADE, to='duplicates.duplicaterule')),
            ],
        ),
        migrations.CreateModel(
            name='DuplicateAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('records_processed', models.IntegerField(default=0)),
                ('duplicates_detected', models.IntegerField(default=0)),
                ('false_positives', models.IntegerField(default=0)),
                ('true_positives', models.IntegerField(default=0)),
                ('avg_confidence_score', models.FloatField(default=0.0)),
                ('processing_time_ms', models.IntegerField(default=0)),
                ('field_performance', models.JSONField(default=dict, help_text='Performance metrics by field')),
                ('algorithm_performance', models.JSONField(default=dict, help_text='Performance metrics by algorithm')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_analytics', to='tenants.tenant')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='duplicates.duplicaterule')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='DuplicateResolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_taken', models.CharField(choices=[('merge', 'Merged Records'), ('keep_both', 'Keep Both Records'), ('delete_duplicate', 'Deleted Duplicate'), ('mark_false_positive', 'Marked as False Positive'), ('update_primary', 'Updated Primary Record'), ('create_relationship', 'Created Relationship')], max_length=50)),
                ('data_changes', models.JSONField(default=dict, help_text='Details of data changes made during resolution')),
                ('resolved_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('duplicate_match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resolutions', to='duplicates.duplicatematch')),
                ('merged_record', models.ForeignKey(blank=True, help_text='The record that was merged/deleted', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='merged_resolutions', to='pipelines.record')),
                ('primary_record', models.ForeignKey(help_text='The record chosen as primary in merge operations', on_delete=django.db.models.deletion.CASCADE, related_name='primary_resolutions', to='pipelines.record')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='duplicate_resolutions', to='tenants.tenant')),
            ],
            options={
                'ordering': ['-resolved_at'],
                'indexes': [models.Index(fields=['tenant', 'resolved_at'], name='duplicates__tenant__16a0e2_idx'), models.Index(fields=['duplicate_match', 'action_taken'], name='duplicates__duplica_5087ce_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='duplicaterule',
            index=models.Index(fields=['tenant', 'pipeline'], name='duplicates__tenant__934c24_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicaterule',
            index=models.Index(fields=['tenant', 'is_active'], name='duplicates__tenant__163684_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='duplicaterule',
            unique_together={('tenant', 'name')},
        ),
        migrations.AddIndex(
            model_name='duplicatematch',
            index=models.Index(fields=['tenant', 'status'], name='duplicates__tenant__2b788a_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicatematch',
            index=models.Index(fields=['tenant', 'detected_at'], name='duplicates__tenant__775582_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicatematch',
            index=models.Index(fields=['rule', 'confidence_score'], name='duplicates__rule_id_efbb30_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicatematch',
            index=models.Index(fields=['record1', 'record2'], name='duplicates__record1_666821_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='duplicatematch',
            unique_together={('tenant', 'record1', 'record2', 'rule')},
        ),
        migrations.AddIndex(
            model_name='duplicatefieldrule',
            index=models.Index(fields=['duplicate_rule', 'is_active'], name='duplicates__duplica_34abaf_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicatefieldrule',
            index=models.Index(fields=['field', 'match_type'], name='duplicates__field_i_f940bf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='duplicatefieldrule',
            unique_together={('duplicate_rule', 'field')},
        ),
        migrations.AddIndex(
            model_name='duplicateexclusion',
            index=models.Index(fields=['tenant', 'record1'], name='duplicates__tenant__9db855_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicateexclusion',
            index=models.Index(fields=['tenant', 'record2'], name='duplicates__tenant__97507f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='duplicateexclusion',
            unique_together={('tenant', 'record1', 'record2', 'rule')},
        ),
        migrations.AddIndex(
            model_name='duplicateanalytics',
            index=models.Index(fields=['tenant', 'date'], name='duplicates__tenant__650ef1_idx'),
        ),
        migrations.AddIndex(
            model_name='duplicateanalytics',
            index=models.Index(fields=['rule', 'date'], name='duplicates__rule_id_2e8ce6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='duplicateanalytics',
            unique_together={('tenant', 'rule', 'date')},
        ),
    ]
