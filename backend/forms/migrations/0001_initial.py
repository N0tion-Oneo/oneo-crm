# Generated by Django 5.0 on 2025-08-01 15:06

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('pipelines', '0002_remove_field_placeholder_remove_field_width'),
        ('tenants', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='FormTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('form_type', models.CharField(choices=[('full', 'Full Form'), ('partial', 'Partial Form'), ('stage_specific', 'Stage-Specific Form'), ('public', 'Public Form'), ('internal', 'Internal Form')], default='full', max_length=50)),
                ('target_stage', models.CharField(blank=True, help_text='For stage-specific forms, which stage this form targets', max_length=100)),
                ('is_public', models.BooleanField(default=False, help_text='Whether this form can be accessed publicly without authentication')),
                ('public_slug', models.SlugField(blank=True, help_text='Public URL slug for public forms', null=True, unique=True)),
                ('allowed_user_types', models.JSONField(default=list, help_text='List of user types allowed to access this form')),
                ('validation_mode', models.CharField(choices=[('strict', 'Strict - Block on any error'), ('lenient', 'Lenient - Allow with warnings'), ('progressive', 'Progressive - Validate as user types')], default='strict', max_length=50)),
                ('enable_duplicate_detection', models.BooleanField(default=True, help_text='Whether to run duplicate detection on form submissions')),
                ('duplicate_action', models.CharField(choices=[('block', 'Block Creation'), ('warn', 'Show Warning'), ('merge_prompt', 'Prompt to Merge'), ('allow', 'Allow with Flag')], default='warn', help_text='Action to take when duplicates are detected', max_length=50)),
                ('success_message', models.TextField(blank=True, help_text='Custom success message after form submission')),
                ('redirect_url', models.URLField(blank=True, help_text='URL to redirect to after successful submission (for public forms)')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('pipeline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_templates', to='pipelines.pipeline')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_templates', to='tenants.tenant')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('tenant', 'name')},
            },
        ),
        migrations.CreateModel(
            name='FormSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_data', models.JSONField(help_text='The actual form data submitted')),
                ('validation_results', models.JSONField(default=dict, help_text='Results of validation checks')),
                ('duplicate_matches', models.JSONField(default=list, help_text='Any duplicate matches found during validation')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('referrer', models.URLField(blank=True)),
                ('session_id', models.CharField(blank=True, max_length=255)),
                ('submission_time_ms', models.IntegerField(blank=True, help_text='Time taken to submit form in milliseconds', null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Validation'), ('valid', 'Valid Submission'), ('invalid', 'Invalid Submission'), ('duplicate', 'Duplicate Detected'), ('merged', 'Merged with Existing')], default='pending', max_length=50)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('record', models.ForeignKey(blank=True, help_text='The record created/updated by this submission', null=True, on_delete=django.db.models.deletion.CASCADE, to='pipelines.record')),
                ('submitted_by', models.ForeignKey(blank=True, help_text='User who submitted the form (null for anonymous submissions)', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('form_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forms.formtemplate')),
            ],
            options={
                'ordering': ['-submitted_at'],
            },
        ),
        migrations.CreateModel(
            name='FormFieldConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_order', models.IntegerField(default=0)),
                ('is_visible', models.BooleanField(default=True)),
                ('is_readonly', models.BooleanField(default=False)),
                ('custom_label', models.CharField(blank=True, help_text='Override the default field label', max_length=255)),
                ('custom_placeholder', models.CharField(blank=True, help_text='Custom placeholder text for input fields', max_length=255)),
                ('custom_help_text', models.TextField(blank=True, help_text='Custom help text to display with the field')),
                ('conditional_logic', models.JSONField(default=dict, help_text='Show/hide conditions based on other field values')),
                ('default_value', models.JSONField(blank=True, help_text='Default value for this field in the form', null=True)),
                ('field_width', models.CharField(choices=[('full', 'Full Width'), ('half', 'Half Width'), ('third', 'One Third'), ('quarter', 'One Quarter')], default='full', help_text='Field width in the form layout', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pipeline_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pipelines.field')),
                ('form_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='field_configs', to='forms.formtemplate')),
            ],
            options={
                'ordering': ['display_order'],
                'unique_together': {('form_template', 'pipeline_field')},
            },
        ),
        migrations.CreateModel(
            name='ValidationRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Human-readable name for this validation rule', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of what this rule validates')),
                ('rule_type', models.CharField(choices=[('required', 'Required Field'), ('min_length', 'Minimum Length'), ('max_length', 'Maximum Length'), ('min_value', 'Minimum Value'), ('max_value', 'Maximum Value'), ('regex', 'Regular Expression'), ('email', 'Email Format'), ('url', 'URL Format'), ('phone', 'Phone Format'), ('custom_function', 'Custom Validation Function'), ('cross_field', 'Cross-Field Validation'), ('conditional', 'Conditional Validation'), ('async_api', 'Async API Validation'), ('duplicate_check', 'Duplicate Detection'), ('date_range', 'Date Range Validation'), ('numeric_range', 'Numeric Range Validation'), ('list_validation', 'List/Array Validation'), ('file_validation', 'File Upload Validation')], max_length=50)),
                ('configuration', models.JSONField(default=dict, help_text='Rule-specific configuration (e.g., regex pattern, min/max values, etc.)')),
                ('error_message', models.TextField(help_text='Error message to show when validation fails')),
                ('warning_message', models.TextField(blank=True, help_text='Optional warning message for non-blocking validation')),
                ('is_async', models.BooleanField(default=False, help_text='Whether this rule requires async validation (API calls, etc.)')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='validation_rules', to='tenants.tenant')),
            ],
            options={
                'ordering': ['name'],
                'unique_together': {('tenant', 'name')},
            },
        ),
        migrations.CreateModel(
            name='FormAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('views', models.IntegerField(default=0)),
                ('submissions', models.IntegerField(default=0)),
                ('valid_submissions', models.IntegerField(default=0)),
                ('invalid_submissions', models.IntegerField(default=0)),
                ('duplicate_submissions', models.IntegerField(default=0)),
                ('abandonment_rate', models.FloatField(default=0.0)),
                ('avg_completion_time_ms', models.IntegerField(default=0)),
                ('field_errors', models.JSONField(default=dict, help_text='Count of validation errors by field')),
                ('form_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forms.formtemplate')),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('form_template', 'date')},
            },
        ),
        migrations.CreateModel(
            name='FormFieldValidation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('execution_order', models.IntegerField(default=0, help_text='Order in which to execute this validation rule')),
                ('is_active', models.BooleanField(default=True)),
                ('conditional_logic', models.JSONField(default=dict, help_text='Conditions under which to apply this validation rule')),
                ('override_message', models.TextField(blank=True, help_text='Override the default validation rule message for this field')),
                ('is_blocking', models.BooleanField(default=True, help_text='Whether this validation failure should block form submission')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('form_field_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='validations', to='forms.formfieldconfiguration')),
                ('validation_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='forms.validationrule')),
            ],
            options={
                'ordering': ['execution_order'],
                'unique_together': {('form_field_config', 'validation_rule')},
            },
        ),
    ]
