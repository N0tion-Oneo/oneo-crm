# Generated by Django 5.0 on 2025-09-09 06:56

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('pipelines', '0017_clear_stored_titles'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name='record',
            name='assigned_user_ids',
            field=django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), blank=True, db_index=True, default=list, help_text='Cached list of user IDs assigned via USER fields', size=None),
        ),
        migrations.AddIndex(
            model_name='record',
            index=django.contrib.postgres.indexes.GinIndex(fields=['assigned_user_ids'], name='idx_assigned_users'),
        ),
        migrations.RunSQL(
            # Create trigger function to extract user IDs from JSONB data
            sql="""
            CREATE OR REPLACE FUNCTION update_assigned_user_ids()
            RETURNS trigger AS $$
            BEGIN
                NEW.assigned_user_ids := ARRAY(
                    SELECT DISTINCT (elem->>'user_id')::int
                    FROM jsonb_each(NEW.data) AS fields(key, value)
                    CROSS JOIN LATERAL jsonb_array_elements(
                        CASE 
                            WHEN jsonb_typeof(value) = 'array' THEN value
                            ELSE '[]'::jsonb
                        END
                    ) AS elem
                    WHERE elem ? 'user_id'
                    AND elem->>'user_id' ~ '^[0-9]+$'
                );
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;
            
            CREATE TRIGGER update_record_assigned_users
            BEFORE INSERT OR UPDATE OF data ON pipelines_record
            FOR EACH ROW
            EXECUTE FUNCTION update_assigned_user_ids();
            
            -- Update existing records to populate assigned_user_ids
            UPDATE pipelines_record
            SET assigned_user_ids = ARRAY(
                SELECT DISTINCT (elem->>'user_id')::int
                FROM jsonb_each(data) AS fields(key, value)
                CROSS JOIN LATERAL jsonb_array_elements(
                    CASE 
                        WHEN jsonb_typeof(value) = 'array' THEN value
                        ELSE '[]'::jsonb
                    END
                ) AS elem
                WHERE elem ? 'user_id'
                AND elem->>'user_id' ~ '^[0-9]+$'
            );
            """,
            reverse_sql="""
            DROP TRIGGER IF EXISTS update_record_assigned_users ON pipelines_record;
            DROP FUNCTION IF EXISTS update_assigned_user_ids();
            """
        ),
    ]
