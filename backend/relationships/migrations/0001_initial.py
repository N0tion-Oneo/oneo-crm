# Generated by Django 5.0 on 2025-07-31 17:24

import django.contrib.postgres.fields
import django.contrib.postgres.indexes
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentication', '0001_initial'),
        ('pipelines', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='RelationshipType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('cardinality', models.CharField(choices=[('one_to_one', 'One to One'), ('one_to_many', 'One to Many'), ('many_to_many', 'Many to Many')], default='many_to_many', max_length=20)),
                ('is_bidirectional', models.BooleanField(default=True)),
                ('forward_label', models.CharField(help_text="e.g., 'works at', 'applied to'", max_length=255)),
                ('reverse_label', models.CharField(blank=True, help_text="e.g., 'employs', 'has applicant'", max_length=255)),
                ('requires_permission', models.BooleanField(default=True)),
                ('permission_config', models.JSONField(default=dict)),
                ('cascade_delete', models.BooleanField(default=False)),
                ('allow_self_reference', models.BooleanField(default=False)),
                ('allow_user_relationships', models.BooleanField(default=False, help_text='Allow this relationship type to be used for user-to-record assignments')),
                ('is_system', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('source_pipeline', models.ForeignKey(blank=True, help_text='Source pipeline constraint (null = any pipeline)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_relationship_types', to='pipelines.pipeline')),
                ('target_pipeline', models.ForeignKey(blank=True, help_text='Target pipeline constraint (null = any pipeline)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='incoming_relationship_types', to='pipelines.pipeline')),
            ],
            options={
                'db_table': 'relationships_relationshiptype',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Relationship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_record_id', models.IntegerField(blank=True, null=True)),
                ('target_record_id', models.IntegerField()),
                ('metadata', models.JSONField(default=dict)),
                ('strength', models.DecimalField(decimal_places=2, default=1.0, max_digits=3)),
                ('role', models.CharField(choices=[('primary', 'Primary'), ('secondary', 'Secondary'), ('viewer', 'Viewer'), ('collaborator', 'Collaborator')], default='primary', help_text='Role of the user in this relationship (for user-to-record relationships)', max_length=50)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('pending', 'Pending')], default='active', max_length=50)),
                ('is_verified', models.BooleanField(default=False)),
                ('can_edit', models.BooleanField(default=True)),
                ('can_delete', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='deleted_relationships', to=settings.AUTH_USER_MODEL)),
                ('source_pipeline', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_relationships', to='pipelines.pipeline')),
                ('target_pipeline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_relationships', to='pipelines.pipeline')),
                ('user', models.ForeignKey(blank=True, help_text='User involved in this relationship (for user-to-record relationships)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='relationships', to=settings.AUTH_USER_MODEL)),
                ('relationship_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='relationships.relationshiptype')),
            ],
            options={
                'db_table': 'relationships_relationship',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PermissionTraversal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_traverse_forward', models.BooleanField(default=True)),
                ('can_traverse_reverse', models.BooleanField(default=True)),
                ('max_depth', models.IntegerField(default=3)),
                ('visible_fields', models.JSONField(default=dict, help_text='Fields visible through this relationship')),
                ('restricted_fields', models.JSONField(default=dict, help_text='Fields to hide through this relationship')),
                ('traversal_conditions', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentication.usertype')),
                ('relationship_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='relationships.relationshiptype')),
            ],
            options={
                'db_table': 'relationships_permissiontraversal',
            },
        ),
        migrations.CreateModel(
            name='RelationshipPath',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_record_id', models.IntegerField()),
                ('target_record_id', models.IntegerField()),
                ('path_length', models.IntegerField()),
                ('path_relationships', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), help_text='Array of relationship IDs in path', size=None)),
                ('path_types', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), help_text='Array of relationship type IDs', size=None)),
                ('path_strength', models.DecimalField(decimal_places=3, default=1.0, max_digits=5)),
                ('path_weight', models.IntegerField(default=1)),
                ('computed_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('source_pipeline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outgoing_paths', to='pipelines.pipeline')),
                ('target_pipeline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incoming_paths', to='pipelines.pipeline')),
            ],
            options={
                'db_table': 'relationships_relationshippath',
                'ordering': ['path_length', '-path_strength'],
                'indexes': [models.Index(fields=['source_pipeline', 'source_record_id'], name='relationshi_source__b6c618_idx'), models.Index(fields=['target_pipeline', 'target_record_id'], name='relationshi_target__6c7840_idx'), models.Index(fields=['path_length'], name='relationshi_path_le_7f8ab0_idx'), models.Index(fields=['expires_at'], name='relationshi_expires_1f4b74_idx'), django.contrib.postgres.indexes.GinIndex(fields=['path_relationships'], name='relationshi_path_re_774af2_gin'), django.contrib.postgres.indexes.GinIndex(fields=['path_types'], name='relationshi_path_ty_32997c_gin')],
                'unique_together': {('source_pipeline', 'source_record_id', 'target_pipeline', 'target_record_id', 'path_length')},
            },
        ),
        migrations.AddIndex(
            model_name='relationshiptype',
            index=models.Index(fields=['slug'], name='relationshi_slug_f75577_idx'),
        ),
        migrations.AddIndex(
            model_name='relationshiptype',
            index=models.Index(fields=['source_pipeline', 'target_pipeline'], name='relationshi_source__696df4_idx'),
        ),
        migrations.AddIndex(
            model_name='relationshiptype',
            index=models.Index(fields=['is_system'], name='relationshi_is_syst_365259_idx'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(fields=['source_pipeline', 'source_record_id'], name='relationshi_source__0d22f2_idx'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(fields=['target_pipeline', 'target_record_id'], name='relationshi_target__f5e49d_idx'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(fields=['relationship_type'], name='relationshi_relatio_cf780a_idx'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(fields=['status'], name='relationshi_status_6fe108_idx'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(fields=['is_deleted'], name='relationshi_is_dele_045168_idx'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(fields=['user'], name='relationshi_user_id_cce9c2_idx'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(fields=['role'], name='relationshi_role_80aa3e_idx'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(fields=['created_at'], name='relationshi_created_184787_idx'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(condition=models.Q(('is_deleted', False), ('user__isnull', True)), fields=['source_pipeline', 'source_record_id', 'relationship_type'], name='idx_rel_src_type_active'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(condition=models.Q(('is_deleted', False), ('user__isnull', True)), fields=['target_pipeline', 'target_record_id', 'relationship_type'], name='idx_rel_tgt_type_active'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(condition=models.Q(('is_deleted', False), ('user__isnull', False)), fields=['user', 'relationship_type', 'status'], name='idx_user_rel_status_active'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(condition=models.Q(('is_deleted', False), ('user__isnull', False)), fields=['target_pipeline', 'target_record_id', 'user'], name='idx_target_user_active'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(condition=models.Q(('is_deleted', False), ('user__isnull', False)), fields=['user', 'role'], name='idx_user_role_active'),
        ),
        migrations.AddIndex(
            model_name='relationship',
            index=models.Index(condition=models.Q(('is_deleted', False)), fields=['relationship_type', 'status'], name='idx_type_status_active'),
        ),
        migrations.AddConstraint(
            model_name='relationship',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('source_pipeline__isnull', True), ('source_record_id__isnull', True), ('user__isnull', False)), models.Q(('source_pipeline__isnull', False), ('source_record_id__isnull', False), ('user__isnull', True)), _connector='OR'), name='relationship_source_constraint'),
        ),
        migrations.AlterUniqueTogether(
            name='relationship',
            unique_together={('relationship_type', 'source_pipeline', 'source_record_id', 'target_pipeline', 'target_record_id'), ('relationship_type', 'user', 'target_pipeline', 'target_record_id', 'role')},
        ),
        migrations.AddIndex(
            model_name='permissiontraversal',
            index=models.Index(fields=['user_type'], name='relationshi_user_ty_a383f5_idx'),
        ),
        migrations.AddIndex(
            model_name='permissiontraversal',
            index=models.Index(fields=['relationship_type'], name='relationshi_relatio_800897_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='permissiontraversal',
            unique_together={('user_type', 'relationship_type')},
        ),
    ]
