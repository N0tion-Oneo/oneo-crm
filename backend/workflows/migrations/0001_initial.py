# Generated by Django 5.0 on 2025-07-31 17:24

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContentLibrary',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('visibility', models.CharField(choices=[('private', 'Private'), ('team', 'Team'), ('organization', 'Organization'), ('public', 'Public')], default='organization', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('requires_approval', models.BooleanField(default=False)),
                ('metadata', models.JSONField(default=dict, help_text='Additional library metadata and settings')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('allowed_users', models.ManyToManyField(blank=True, related_name='accessible_libraries', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_libraries', to=settings.AUTH_USER_MODEL)),
                ('parent_library', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_libraries', to='workflows.contentlibrary')),
            ],
            options={
                'verbose_name_plural': 'Content Libraries',
                'db_table': 'workflows_content_library',
            },
        ),
        migrations.CreateModel(
            name='ContentTag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('color_code', models.CharField(blank=True, help_text='Hex color code for UI display', max_length=7)),
                ('category', models.CharField(blank=True, max_length=100)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'workflows_content_tag',
            },
        ),
        migrations.CreateModel(
            name='ContentAsset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('content_type', models.CharField(choices=[('email_template', 'Email Template'), ('message_template', 'Message Template'), ('document_template', 'Document Template'), ('image_asset', 'Image Asset'), ('document_asset', 'Document Asset'), ('video_asset', 'Video Asset'), ('html_snippet', 'HTML Snippet'), ('text_snippet', 'Text Snippet'), ('json_data', 'JSON Data')], max_length=20)),
                ('content_text', models.TextField(blank=True, help_text='Text-based content (templates, snippets, etc.)')),
                ('content_file', models.FileField(blank=True, help_text='File-based content (images, documents, etc.)', null=True, upload_to='content_assets/%Y/%m/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'svg', 'webp', 'pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'mp4', 'mov', 'avi', 'webm', 'json', 'xml', 'csv', 'txt'])])),
                ('content_data', models.JSONField(default=dict, help_text='Structured data content (JSON, configuration, etc.)')),
                ('template_variables', models.JSONField(default=list, help_text='List of variables available in this template')),
                ('variable_schema', models.JSONField(default=dict, help_text='Schema defining variable types and validation')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_approval', 'Pending Approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('version', models.CharField(default='1.0', max_length=20)),
                ('is_current_version', models.BooleanField(default=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('performance_score', models.DecimalField(blank=True, decimal_places=2, help_text='Performance score based on usage analytics', max_digits=5, null=True)),
                ('visibility', models.CharField(choices=[('private', 'Private'), ('team', 'Team'), ('organization', 'Organization'), ('public', 'Public')], default='organization', max_length=20)),
                ('file_size', models.PositiveIntegerField(blank=True, help_text='File size in bytes', null=True)),
                ('mime_type', models.CharField(blank=True, max_length=100)),
                ('metadata', models.JSONField(default=dict, help_text='Additional content metadata (dimensions, duration, etc.)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_content', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_content', to=settings.AUTH_USER_MODEL)),
                ('parent_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='version_children', to='workflows.contentasset')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='workflows.contentlibrary')),
                ('tags', models.ManyToManyField(blank=True, related_name='assets', to='workflows.contenttag')),
            ],
            options={
                'db_table': 'workflows_content_asset',
            },
        ),
        migrations.CreateModel(
            name='ContentUsage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('workflow_id', models.UUIDField(help_text='ID of the workflow using this content')),
                ('workflow_name', models.CharField(max_length=255)),
                ('node_id', models.CharField(help_text='ID of the node using this content', max_length=100)),
                ('node_type', models.CharField(max_length=100)),
                ('usage_type', models.CharField(help_text='How the content is used (template, asset, reference, etc.)', max_length=50)),
                ('variables_used', models.JSONField(default=dict, help_text='Variables passed to the content when used')),
                ('execution_count', models.PositiveIntegerField(default=0)),
                ('last_execution', models.DateTimeField(blank=True, null=True)),
                ('success_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('metadata', models.JSONField(default=dict, help_text='Additional usage context and performance data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content_asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_records', to='workflows.contentasset')),
            ],
            options={
                'db_table': 'workflows_content_usage',
            },
        ),
        migrations.CreateModel(
            name='RecoveryConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('config_name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('auto_checkpoint_enabled', models.BooleanField(default=True)),
                ('checkpoint_interval_nodes', models.IntegerField(default=5, help_text='Create checkpoint every N nodes', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)])),
                ('max_checkpoints_per_execution', models.IntegerField(default=20, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('checkpoint_retention_days', models.IntegerField(default=30, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)])),
                ('auto_recovery_enabled', models.BooleanField(default=True)),
                ('max_recovery_attempts', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('recovery_delay_minutes', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(60)])),
                ('replay_enabled', models.BooleanField(default=True)),
                ('max_concurrent_replays', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('replay_timeout_hours', models.IntegerField(default=24, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(72)])),
                ('auto_cleanup_enabled', models.BooleanField(default=True)),
                ('cleanup_interval_days', models.IntegerField(default=7, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(30)])),
                ('additional_settings', models.JSONField(default=dict, help_text='Additional configuration parameters')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('paused', 'Paused'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('version', models.PositiveIntegerField(default=1)),
                ('category', models.CharField(choices=[('communication', 'Communication'), ('crm', 'CRM & Sales'), ('marketing', 'Marketing'), ('automation', 'Automation'), ('analytics', 'Analytics'), ('integration', 'Integration'), ('custom', 'Custom')], default='custom', max_length=20)),
                ('trigger_type', models.CharField(choices=[('manual', 'Manual'), ('record_created', 'Record Created'), ('record_updated', 'Record Updated'), ('record_deleted', 'Record Deleted'), ('field_changed', 'Field Changed'), ('scheduled', 'Scheduled'), ('webhook', 'Webhook'), ('api_endpoint', 'API Endpoint'), ('form_submitted', 'Form Submitted'), ('email_received', 'Email Received'), ('message_received', 'Message Received'), ('status_changed', 'Status Changed'), ('date_reached', 'Date Reached'), ('condition_met', 'Condition Met'), ('pipeline_stage_changed', 'Pipeline Stage Changed'), ('engagement_threshold', 'Engagement Threshold'), ('workflow_completed', 'Workflow Completed')], max_length=30)),
                ('trigger_config', models.JSONField(default=dict, help_text='Trigger-specific configuration')),
                ('max_executions_per_hour', models.PositiveIntegerField(default=100)),
                ('timeout_minutes', models.PositiveIntegerField(default=60)),
                ('retry_count', models.PositiveIntegerField(default=3)),
                ('enable_logging', models.BooleanField(default=True)),
                ('enable_debugging', models.BooleanField(default=False)),
                ('uses_reusable_workflows', models.BooleanField(default=False, help_text='Whether this workflow uses reusable workflow components')),
                ('reusable_workflow_dependencies', models.JSONField(default=list, help_text='List of reusable workflow names this workflow depends on')),
                ('visibility', models.CharField(choices=[('private', 'Private'), ('internal', 'Internal (Team)'), ('public', 'Public')], default='private', max_length=10)),
                ('allowed_teams', models.JSONField(default=list, help_text='Team IDs that have access to this workflow')),
                ('workflow_definition', models.JSONField(default=dict, help_text='Complete workflow definition including nodes and edges')),
                ('execution_count', models.PositiveIntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0, help_text='Success rate as percentage')),
                ('avg_execution_time_ms', models.PositiveIntegerField(default=0)),
                ('last_executed_at', models.DateTimeField(blank=True, null=True)),
                ('tags', models.JSONField(default=list, help_text='Tags for workflow organization and search')),
                ('metadata', models.JSONField(default=dict, help_text='Additional workflow metadata')),
                ('allowed_users', models.ManyToManyField(blank=True, related_name='accessible_workflows', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_workflows', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'workflows_workflow',
            },
        ),
        migrations.CreateModel(
            name='RecoveryStrategy',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('strategy_type', models.CharField(choices=[('retry', 'Retry from Last Checkpoint'), ('rollback', 'Rollback to Previous State'), ('skip', 'Skip Failed Node'), ('manual', 'Manual Intervention'), ('restart', 'Restart from Beginning')], max_length=20)),
                ('node_type', models.CharField(blank=True, help_text='Node type this strategy applies to', max_length=50)),
                ('error_patterns', models.JSONField(default=list, help_text='Error patterns that trigger this strategy')),
                ('max_retry_attempts', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('retry_delay_seconds', models.IntegerField(default=60, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3600)])),
                ('backoff_multiplier', models.DecimalField(decimal_places=2, default=Decimal('1.5'), max_digits=3, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('conditions', models.JSONField(default=dict, help_text='Conditions that must be met for this strategy to apply')),
                ('recovery_actions', models.JSONField(default=list, help_text='Ordered list of recovery actions to perform')),
                ('is_active', models.BooleanField(default=True)),
                ('priority', models.IntegerField(default=50, help_text='Strategy priority (higher numbers = higher priority)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('usage_count', models.IntegerField(default=0)),
                ('success_count', models.IntegerField(default=0)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(blank=True, help_text='Specific workflow (null for global strategies)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recovery_strategies', to='workflows.workflow')),
            ],
        ),
        migrations.CreateModel(
            name='WorkflowAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(help_text='Date for these analytics')),
                ('total_executions', models.PositiveIntegerField(default=0)),
                ('successful_executions', models.PositiveIntegerField(default=0)),
                ('failed_executions', models.PositiveIntegerField(default=0)),
                ('avg_execution_time_ms', models.PositiveIntegerField(default=0)),
                ('min_execution_time_ms', models.PositiveIntegerField(default=0)),
                ('max_execution_time_ms', models.PositiveIntegerField(default=0)),
                ('node_performance', models.JSONField(default=dict, help_text='Performance metrics per node type')),
                ('error_distribution', models.JSONField(default=dict, help_text='Error types and counts')),
                ('most_common_errors', models.JSONField(default=list, help_text='Most common error messages')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='workflows.workflow')),
            ],
            options={
                'db_table': 'workflows_analytics',
            },
        ),
        migrations.CreateModel(
            name='WorkflowExecution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('paused', 'Paused (Approval)')], default='pending', max_length=20)),
                ('trigger_data', models.JSONField(default=dict, help_text='Data that triggered this execution')),
                ('execution_context', models.JSONField(default=dict, help_text='Shared context across all nodes')),
                ('final_output', models.JSONField(blank=True, help_text='Final workflow output', null=True)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='workflows.workflow')),
            ],
            options={
                'db_table': 'workflows_execution',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(help_text='Type of event (created, executed, failed, etc.)', max_length=50)),
                ('event_data', models.JSONField(default=dict, help_text='Event-specific data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='workflows.workflow')),
                ('execution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='workflows.workflowexecution')),
            ],
            options={
                'db_table': 'workflows_event',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowCheckpoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('checkpoint_type', models.CharField(choices=[('auto', 'Automatic'), ('manual', 'Manual'), ('node_completion', 'Node Completion'), ('error_boundary', 'Error Boundary'), ('milestone', 'Milestone')], max_length=20)),
                ('node_id', models.CharField(blank=True, max_length=100)),
                ('node_name', models.CharField(blank=True, max_length=200)),
                ('sequence_number', models.IntegerField(help_text='Sequential order of checkpoints')),
                ('execution_state', models.JSONField(default=dict, help_text='Complete execution state at checkpoint')),
                ('context_data', models.JSONField(default=dict, help_text='Workflow context and variables at checkpoint')),
                ('node_outputs', models.JSONField(default=dict, help_text='Outputs from completed nodes')),
                ('description', models.TextField(blank=True)),
                ('checkpoint_size_bytes', models.IntegerField(blank=True, null=True)),
                ('is_recoverable', models.BooleanField(default=True, help_text='Whether this checkpoint can be used for recovery')),
                ('is_milestone', models.BooleanField(default=False, help_text='Whether this is a milestone checkpoint')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this checkpoint expires and can be cleaned up', null=True)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkpoints', to='workflows.workflow')),
                ('execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='checkpoints', to='workflows.workflowexecution')),
            ],
        ),
        migrations.CreateModel(
            name='WorkflowApproval',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('approval_data', models.JSONField(default=dict, help_text='Data requiring approval')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=10)),
                ('timeout_at', models.DateTimeField(blank=True, help_text='When approval expires', null=True)),
                ('escalation_rules', models.JSONField(default=list, help_text='Escalation rules if not approved in time')),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('response_comments', models.TextField(blank=True)),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_approvals', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_approvals', to=settings.AUTH_USER_MODEL)),
                ('responded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completed_approvals', to=settings.AUTH_USER_MODEL)),
                ('execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approvals', to='workflows.workflowexecution')),
            ],
            options={
                'db_table': 'workflows_approval',
            },
        ),
        migrations.CreateModel(
            name='WorkflowExecutionLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('node_id', models.CharField(help_text='Node ID from workflow definition', max_length=255)),
                ('node_type', models.CharField(choices=[('ai_prompt', 'AI Prompt'), ('ai_analysis', 'AI Analysis'), ('ai_classification', 'AI Classification'), ('record_create', 'Create Record'), ('record_update', 'Update Record'), ('record_delete', 'Delete Record'), ('record_find', 'Find Records'), ('condition', 'Condition (If/Else)'), ('for_each', 'For Each (Loop)'), ('wait_delay', 'Wait/Delay'), ('http_request', 'HTTP Request'), ('webhook_out', 'Send Webhook'), ('approval', 'Human Approval'), ('task_notify', 'Task/Notification'), ('sub_workflow', 'Sub-workflow Call'), ('reusable_workflow', 'Reusable Workflow'), ('merge_data', 'Merge Data'), ('unipile_send_email', 'Send Email via UniPile'), ('unipile_send_linkedin', 'Send LinkedIn Message'), ('unipile_send_whatsapp', 'Send WhatsApp Message'), ('unipile_send_sms', 'Send SMS'), ('unipile_sync_messages', 'Sync UniPile Messages'), ('log_communication', 'Log Communication Activity'), ('resolve_contact', 'Resolve/Create Contact Record'), ('update_contact_status', 'Update Contact Status'), ('create_follow_up_task', 'Create Follow-up Task'), ('analyze_communication', 'Analyze Communication Patterns'), ('score_engagement', 'Score Contact Engagement')], max_length=30)),
                ('node_name', models.CharField(blank=True, max_length=255)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('paused', 'Paused (Approval)')], default='pending', max_length=20)),
                ('input_data', models.JSONField(default=dict, help_text='Data passed to this node')),
                ('output_data', models.JSONField(blank=True, help_text='Data produced by this node', null=True)),
                ('execution_details', models.JSONField(default=dict, help_text='Node-specific execution details')),
                ('error_details', models.JSONField(blank=True, help_text='Error information if node failed', null=True)),
                ('duration_ms', models.PositiveIntegerField(blank=True, help_text='Execution duration in milliseconds', null=True)),
                ('execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='workflows.workflowexecution')),
            ],
            options={
                'db_table': 'workflows_execution_log',
                'ordering': ['started_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowRecoveryLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recovery_type', models.CharField(choices=[('retry', 'Retry from Last Checkpoint'), ('rollback', 'Rollback to Previous State'), ('skip', 'Skip Failed Node'), ('manual', 'Manual Intervention'), ('restart', 'Restart from Beginning')], max_length=20)),
                ('trigger_reason', models.CharField(choices=[('execution_failed', 'Execution Failed'), ('node_error', 'Node Error'), ('timeout', 'Timeout'), ('manual_trigger', 'Manual Trigger'), ('system_error', 'System Error'), ('resource_unavailable', 'Resource Unavailable')], max_length=100)),
                ('original_error', models.TextField(blank=True)),
                ('failed_node_id', models.CharField(blank=True, max_length=100)),
                ('failed_node_name', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('attempt_number', models.IntegerField(default=1)),
                ('recovery_actions_taken', models.JSONField(default=list, help_text='List of recovery actions that were performed')),
                ('recovery_data', models.JSONField(default=dict, help_text='Additional recovery data and context')),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, null=True)),
                ('was_successful', models.BooleanField(blank=True, null=True)),
                ('recovery_error', models.TextField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('checkpoint', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recovery_logs', to='workflows.workflowcheckpoint')),
                ('execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recovery_logs', to='workflows.workflowexecution')),
                ('new_execution', models.ForeignKey(blank=True, help_text='New execution created by recovery', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recovered_from_logs', to='workflows.workflowexecution')),
                ('strategy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recovery_logs', to='workflows.recoverystrategy')),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recovery_logs', to='workflows.workflow')),
            ],
        ),
        migrations.CreateModel(
            name='WorkflowReplaySession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('replay_type', models.CharField(choices=[('full', 'Full Replay'), ('partial', 'Partial Replay'), ('debug', 'Debug Replay'), ('test', 'Test Replay')], max_length=20)),
                ('modified_inputs', models.JSONField(default=dict, help_text='Modified inputs for replay')),
                ('modified_context', models.JSONField(default=dict, help_text='Modified context variables for replay')),
                ('skip_nodes', models.JSONField(default=list, help_text='Node IDs to skip during replay')),
                ('debug_mode', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('created', 'Created'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='created', max_length=20)),
                ('purpose', models.TextField(blank=True, help_text='Purpose of this replay session')),
                ('notes', models.TextField(blank=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('original_execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replay_sessions', to='workflows.workflowexecution')),
                ('replay_execution', models.ForeignKey(blank=True, help_text='New execution created by replay', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replay_session', to='workflows.workflowexecution')),
                ('replay_from_checkpoint', models.ForeignKey(blank=True, help_text='Checkpoint to replay from (null = from beginning)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='workflows.workflowcheckpoint')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replay_sessions', to='workflows.workflow')),
            ],
        ),
        migrations.CreateModel(
            name='WorkflowSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('cron_expression', models.CharField(help_text='Cron expression for scheduling', max_length=255)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_execution', models.DateTimeField(blank=True, null=True)),
                ('next_execution', models.DateTimeField(blank=True, null=True)),
                ('execution_count', models.PositiveIntegerField(default=0)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='workflows.workflow')),
            ],
            options={
                'db_table': 'workflows_schedule',
            },
        ),
        migrations.CreateModel(
            name='WorkflowTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('communication', 'Communication'), ('crm', 'CRM & Sales'), ('marketing', 'Marketing'), ('automation', 'Automation'), ('analytics', 'Analytics'), ('integration', 'Integration'), ('custom', 'Custom')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_system_template', models.BooleanField(default=False, help_text='Built-in system template')),
                ('is_active', models.BooleanField(default=True)),
                ('visibility', models.CharField(choices=[('private', 'Private'), ('internal', 'Internal (Team)'), ('public', 'Public')], default='public', max_length=10)),
                ('template_definition', models.JSONField(help_text='Workflow template structure')),
                ('default_config', models.JSONField(default=dict, help_text='Default configuration values')),
                ('required_fields', models.JSONField(default=list, help_text='Fields that must be configured by user')),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('tags', models.JSONField(default=list)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'workflows_template',
            },
        ),
        migrations.CreateModel(
            name='WorkflowTrigger',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('trigger_type', models.CharField(choices=[('manual', 'Manual'), ('record_created', 'Record Created'), ('record_updated', 'Record Updated'), ('record_deleted', 'Record Deleted'), ('field_changed', 'Field Changed'), ('scheduled', 'Scheduled'), ('webhook', 'Webhook'), ('api_endpoint', 'API Endpoint'), ('form_submitted', 'Form Submitted'), ('email_received', 'Email Received'), ('message_received', 'Message Received'), ('status_changed', 'Status Changed'), ('date_reached', 'Date Reached'), ('condition_met', 'Condition Met'), ('pipeline_stage_changed', 'Pipeline Stage Changed'), ('engagement_threshold', 'Engagement Threshold'), ('workflow_completed', 'Workflow Completed')], max_length=30)),
                ('name', models.CharField(help_text='Human-readable trigger name', max_length=255)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('trigger_config', models.JSONField(default=dict, help_text='Trigger-specific configuration')),
                ('conditions', models.JSONField(default=list, help_text='Conditions that must be met')),
                ('max_executions_per_minute', models.PositiveIntegerField(default=10)),
                ('max_executions_per_hour', models.PositiveIntegerField(default=100)),
                ('max_executions_per_day', models.PositiveIntegerField(default=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_triggered_at', models.DateTimeField(blank=True, null=True)),
                ('execution_count', models.PositiveIntegerField(default=0)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='triggers', to='workflows.workflow')),
            ],
            options={
                'db_table': 'workflows_trigger',
            },
        ),
        migrations.CreateModel(
            name='WorkflowVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('version_number', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('workflow_definition', models.JSONField(help_text='Workflow definition at this version')),
                ('change_summary', models.TextField(blank=True, help_text='Summary of changes in this version')),
                ('is_active', models.BooleanField(default=False, help_text='Whether this version is currently active')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='workflows.workflow')),
            ],
            options={
                'db_table': 'workflows_version',
                'ordering': ['-version_number'],
            },
        ),
        migrations.CreateModel(
            name='ContentApproval',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('request_message', models.TextField(blank=True)),
                ('changes_requested', models.JSONField(default=list, help_text='List of requested changes or modifications')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('changes_requested', 'Changes Requested')], default='pending', max_length=20)),
                ('response_message', models.TextField(blank=True)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_content_approvals', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_approval_requests', to=settings.AUTH_USER_MODEL)),
                ('content_asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approval_requests', to='workflows.contentasset')),
            ],
            options={
                'db_table': 'workflows_content_approval',
                'indexes': [models.Index(fields=['content_asset', 'status'], name='workflows_c_content_aad941_idx'), models.Index(fields=['assigned_to', 'status'], name='workflows_c_assigne_57924d_idx'), models.Index(fields=['requested_by'], name='workflows_c_request_67f84a_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='contentlibrary',
            index=models.Index(fields=['visibility', 'is_active'], name='workflows_c_visibil_246a57_idx'),
        ),
        migrations.AddIndex(
            model_name='contentlibrary',
            index=models.Index(fields=['parent_library'], name='workflows_c_parent__24ea38_idx'),
        ),
        migrations.AddIndex(
            model_name='contentlibrary',
            index=models.Index(fields=['created_by'], name='workflows_c_created_53e76e_idx'),
        ),
        migrations.AddIndex(
            model_name='contenttag',
            index=models.Index(fields=['name'], name='workflows_c_name_ba3e17_idx'),
        ),
        migrations.AddIndex(
            model_name='contenttag',
            index=models.Index(fields=['category'], name='workflows_c_categor_7a7985_idx'),
        ),
        migrations.AddIndex(
            model_name='contenttag',
            index=models.Index(fields=['usage_count'], name='workflows_c_usage_c_709740_idx'),
        ),
        migrations.AddIndex(
            model_name='contentasset',
            index=models.Index(fields=['content_type', 'status'], name='workflows_c_content_54b931_idx'),
        ),
        migrations.AddIndex(
            model_name='contentasset',
            index=models.Index(fields=['library', 'is_current_version'], name='workflows_c_library_57d023_idx'),
        ),
        migrations.AddIndex(
            model_name='contentasset',
            index=models.Index(fields=['visibility', 'status'], name='workflows_c_visibil_ef689c_idx'),
        ),
        migrations.AddIndex(
            model_name='contentasset',
            index=models.Index(fields=['created_by'], name='workflows_c_created_2dcd10_idx'),
        ),
        migrations.AddIndex(
            model_name='contentasset',
            index=models.Index(fields=['usage_count'], name='workflows_c_usage_c_eed514_idx'),
        ),
        migrations.AddIndex(
            model_name='contentasset',
            index=models.Index(fields=['last_used_at'], name='workflows_c_last_us_47ad1a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contentasset',
            unique_together={('library', 'name', 'version')},
        ),
        migrations.AddIndex(
            model_name='contentusage',
            index=models.Index(fields=['content_asset', 'workflow_id'], name='workflows_c_content_055bfe_idx'),
        ),
        migrations.AddIndex(
            model_name='contentusage',
            index=models.Index(fields=['workflow_id'], name='workflows_c_workflo_849ee1_idx'),
        ),
        migrations.AddIndex(
            model_name='contentusage',
            index=models.Index(fields=['execution_count'], name='workflows_c_executi_1c3447_idx'),
        ),
        migrations.AddIndex(
            model_name='contentusage',
            index=models.Index(fields=['last_execution'], name='workflows_c_last_ex_816cd3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contentusage',
            unique_together={('content_asset', 'workflow_id', 'node_id')},
        ),
        migrations.AddIndex(
            model_name='recoveryconfiguration',
            index=models.Index(fields=['is_active'], name='workflows_r_is_acti_64daa7_idx'),
        ),
        migrations.AddIndex(
            model_name='recoveryconfiguration',
            index=models.Index(fields=['created_at'], name='workflows_r_created_8e5a81_idx'),
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['status', 'trigger_type'], name='workflows_w_status_6c6375_idx'),
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['created_by', 'status'], name='workflows_w_created_e9b9ae_idx'),
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['category', 'visibility'], name='workflows_w_categor_98cd55_idx'),
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['uses_reusable_workflows'], name='workflows_w_uses_re_209e11_idx'),
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['last_executed_at'], name='workflows_w_last_ex_70ca98_idx'),
        ),
        migrations.AddIndex(
            model_name='recoverystrategy',
            index=models.Index(fields=['workflow', 'is_active'], name='workflows_r_workflo_17db37_idx'),
        ),
        migrations.AddIndex(
            model_name='recoverystrategy',
            index=models.Index(fields=['strategy_type', 'priority'], name='workflows_r_strateg_e8babf_idx'),
        ),
        migrations.AddIndex(
            model_name='recoverystrategy',
            index=models.Index(fields=['node_type', 'is_active'], name='workflows_r_node_ty_e5af86_idx'),
        ),
        migrations.AddIndex(
            model_name='recoverystrategy',
            index=models.Index(fields=['priority', 'is_active'], name='workflows_r_priorit_251714_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowanalytics',
            index=models.Index(fields=['workflow', 'date'], name='workflows_a_workflo_651ed2_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowanalytics',
            index=models.Index(fields=['date'], name='workflows_a_date_7a68e7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workflowanalytics',
            unique_together={('workflow', 'date')},
        ),
        migrations.AddIndex(
            model_name='workflowexecution',
            index=models.Index(fields=['workflow', 'status'], name='workflows_e_workflo_4320c4_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowexecution',
            index=models.Index(fields=['started_at'], name='workflows_e_started_f4f2e8_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowevent',
            index=models.Index(fields=['workflow', 'event_type'], name='workflows_e_workflo_9ecff8_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowevent',
            index=models.Index(fields=['created_at'], name='workflows_e_created_d1c898_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowevent',
            index=models.Index(fields=['execution'], name='workflows_e_executi_22cdc3_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowcheckpoint',
            index=models.Index(fields=['execution', 'sequence_number'], name='workflows_w_executi_6c3271_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowcheckpoint',
            index=models.Index(fields=['workflow', 'created_at'], name='workflows_w_workflo_93f962_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowcheckpoint',
            index=models.Index(fields=['checkpoint_type', 'is_recoverable'], name='workflows_w_checkpo_4687c8_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowcheckpoint',
            index=models.Index(fields=['expires_at'], name='workflows_w_expires_3fc26f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workflowcheckpoint',
            unique_together={('execution', 'sequence_number')},
        ),
        migrations.AddIndex(
            model_name='workflowapproval',
            index=models.Index(fields=['assigned_to', 'status'], name='workflows_a_assigne_f4eb24_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowapproval',
            index=models.Index(fields=['created_at'], name='workflows_a_created_965edf_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowapproval',
            index=models.Index(fields=['timeout_at'], name='workflows_a_timeout_fb8f53_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowexecutionlog',
            index=models.Index(fields=['execution', 'node_id'], name='workflows_e_executi_99f454_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowexecutionlog',
            index=models.Index(fields=['started_at'], name='workflows_e_started_fb14a4_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowrecoverylog',
            index=models.Index(fields=['execution', 'started_at'], name='workflows_w_executi_682c5b_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowrecoverylog',
            index=models.Index(fields=['workflow', 'status'], name='workflows_w_workflo_e68d0c_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowrecoverylog',
            index=models.Index(fields=['recovery_type', 'was_successful'], name='workflows_w_recover_55e9cc_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowrecoverylog',
            index=models.Index(fields=['trigger_reason', 'started_at'], name='workflows_w_trigger_cfa394_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowrecoverylog',
            index=models.Index(fields=['status', 'started_at'], name='workflows_w_status_8b2617_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowreplaysession',
            index=models.Index(fields=['workflow', 'created_at'], name='workflows_w_workflo_82d734_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowreplaysession',
            index=models.Index(fields=['original_execution', 'status'], name='workflows_w_origina_585038_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowreplaysession',
            index=models.Index(fields=['replay_type', 'status'], name='workflows_w_replay__f354bd_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowreplaysession',
            index=models.Index(fields=['created_by', 'created_at'], name='workflows_w_created_5dd75e_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowschedule',
            index=models.Index(fields=['is_active', 'next_execution'], name='workflows_s_is_acti_db00a2_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtemplate',
            index=models.Index(fields=['category', 'is_active'], name='workflows_t_categor_0c5f63_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtemplate',
            index=models.Index(fields=['is_system_template'], name='workflows_t_is_syst_83d8d6_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtrigger',
            index=models.Index(fields=['workflow', 'is_active'], name='workflows_t_workflo_32a3aa_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtrigger',
            index=models.Index(fields=['trigger_type', 'is_active'], name='workflows_t_trigger_dc0b35_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtrigger',
            index=models.Index(fields=['last_triggered_at'], name='workflows_t_last_tr_7e2950_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowversion',
            index=models.Index(fields=['workflow', 'version_number'], name='workflows_v_workflo_f56616_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowversion',
            index=models.Index(fields=['created_at'], name='workflows_v_created_8db04b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workflowversion',
            unique_together={('workflow', 'version_number')},
        ),
    ]
