# Generated by Django 5.0 on 2025-07-29 19:00

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Workflow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('paused', 'Paused'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('version', models.PositiveIntegerField(default=1)),
                ('category', models.CharField(choices=[('communication', 'Communication'), ('crm', 'CRM & Sales'), ('marketing', 'Marketing'), ('automation', 'Automation'), ('analytics', 'Analytics'), ('integration', 'Integration'), ('custom', 'Custom')], default='custom', max_length=20)),
                ('trigger_type', models.CharField(choices=[('manual', 'Manual'), ('record_created', 'Record Created'), ('record_updated', 'Record Updated'), ('record_deleted', 'Record Deleted'), ('field_changed', 'Field Changed'), ('scheduled', 'Scheduled'), ('webhook', 'Webhook'), ('api_endpoint', 'API Endpoint'), ('form_submitted', 'Form Submitted'), ('email_received', 'Email Received'), ('message_received', 'Message Received'), ('status_changed', 'Status Changed'), ('date_reached', 'Date Reached'), ('condition_met', 'Condition Met'), ('pipeline_stage_changed', 'Pipeline Stage Changed'), ('engagement_threshold', 'Engagement Threshold'), ('workflow_completed', 'Workflow Completed')], max_length=30)),
                ('trigger_config', models.JSONField(default=dict, help_text='Trigger-specific configuration')),
                ('max_executions_per_hour', models.PositiveIntegerField(default=100)),
                ('timeout_minutes', models.PositiveIntegerField(default=60)),
                ('retry_count', models.PositiveIntegerField(default=3)),
                ('enable_logging', models.BooleanField(default=True)),
                ('enable_debugging', models.BooleanField(default=False)),
                ('uses_reusable_workflows', models.BooleanField(default=False, help_text='Whether this workflow uses reusable workflow components')),
                ('reusable_workflow_dependencies', models.JSONField(default=list, help_text='List of reusable workflow names this workflow depends on')),
                ('visibility', models.CharField(choices=[('private', 'Private'), ('internal', 'Internal (Team)'), ('public', 'Public')], default='private', max_length=10)),
                ('allowed_teams', models.JSONField(default=list, help_text='Team IDs that have access to this workflow')),
                ('workflow_definition', models.JSONField(default=dict, help_text='Complete workflow definition including nodes and edges')),
                ('execution_count', models.PositiveIntegerField(default=0)),
                ('success_rate', models.FloatField(default=0.0, help_text='Success rate as percentage')),
                ('avg_execution_time_ms', models.PositiveIntegerField(default=0)),
                ('last_executed_at', models.DateTimeField(blank=True, null=True)),
                ('tags', models.JSONField(default=list, help_text='Tags for workflow organization and search')),
                ('metadata', models.JSONField(default=dict, help_text='Additional workflow metadata')),
                ('allowed_users', models.ManyToManyField(blank=True, related_name='accessible_workflows', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_workflows', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'workflows_workflow',
            },
        ),
        migrations.CreateModel(
            name='WorkflowAnalytics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('date', models.DateField(help_text='Date for these analytics')),
                ('total_executions', models.PositiveIntegerField(default=0)),
                ('successful_executions', models.PositiveIntegerField(default=0)),
                ('failed_executions', models.PositiveIntegerField(default=0)),
                ('avg_execution_time_ms', models.PositiveIntegerField(default=0)),
                ('min_execution_time_ms', models.PositiveIntegerField(default=0)),
                ('max_execution_time_ms', models.PositiveIntegerField(default=0)),
                ('node_performance', models.JSONField(default=dict, help_text='Performance metrics per node type')),
                ('error_distribution', models.JSONField(default=dict, help_text='Error types and counts')),
                ('most_common_errors', models.JSONField(default=list, help_text='Most common error messages')),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='workflows.workflow')),
            ],
            options={
                'db_table': 'workflows_analytics',
            },
        ),
        migrations.CreateModel(
            name='WorkflowExecution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('paused', 'Paused (Approval)')], default='pending', max_length=20)),
                ('trigger_data', models.JSONField(default=dict, help_text='Data that triggered this execution')),
                ('execution_context', models.JSONField(default=dict, help_text='Shared context across all nodes')),
                ('final_output', models.JSONField(blank=True, help_text='Final workflow output', null=True)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('triggered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='workflows.workflow')),
            ],
            options={
                'db_table': 'workflows_execution',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(help_text='Type of event (created, executed, failed, etc.)', max_length=50)),
                ('event_data', models.JSONField(default=dict, help_text='Event-specific data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='workflows.workflow')),
                ('execution', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='workflows.workflowexecution')),
            ],
            options={
                'db_table': 'workflows_event',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowApproval',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('approval_data', models.JSONField(default=dict, help_text='Data requiring approval')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('expired', 'Expired')], default='pending', max_length=10)),
                ('timeout_at', models.DateTimeField(blank=True, help_text='When approval expires', null=True)),
                ('escalation_rules', models.JSONField(default=list, help_text='Escalation rules if not approved in time')),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('response_comments', models.TextField(blank=True)),
                ('assigned_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_approvals', to=settings.AUTH_USER_MODEL)),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_approvals', to=settings.AUTH_USER_MODEL)),
                ('responded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='completed_approvals', to=settings.AUTH_USER_MODEL)),
                ('execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approvals', to='workflows.workflowexecution')),
            ],
            options={
                'db_table': 'workflows_approval',
            },
        ),
        migrations.CreateModel(
            name='WorkflowExecutionLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('node_id', models.CharField(help_text='Node ID from workflow definition', max_length=255)),
                ('node_type', models.CharField(choices=[('ai_prompt', 'AI Prompt'), ('ai_analysis', 'AI Analysis'), ('ai_classification', 'AI Classification'), ('record_create', 'Create Record'), ('record_update', 'Update Record'), ('record_delete', 'Delete Record'), ('record_find', 'Find Records'), ('condition', 'Condition (If/Else)'), ('for_each', 'For Each (Loop)'), ('wait_delay', 'Wait/Delay'), ('http_request', 'HTTP Request'), ('webhook_out', 'Send Webhook'), ('approval', 'Human Approval'), ('task_notify', 'Task/Notification'), ('sub_workflow', 'Sub-workflow Call'), ('reusable_workflow', 'Reusable Workflow'), ('merge_data', 'Merge Data'), ('unipile_send_email', 'Send Email via UniPile'), ('unipile_send_linkedin', 'Send LinkedIn Message'), ('unipile_send_whatsapp', 'Send WhatsApp Message'), ('unipile_send_sms', 'Send SMS'), ('unipile_sync_messages', 'Sync UniPile Messages'), ('log_communication', 'Log Communication Activity'), ('resolve_contact', 'Resolve/Create Contact Record'), ('update_contact_status', 'Update Contact Status'), ('create_follow_up_task', 'Create Follow-up Task'), ('analyze_communication', 'Analyze Communication Patterns'), ('score_engagement', 'Score Contact Engagement')], max_length=30)),
                ('node_name', models.CharField(blank=True, max_length=255)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('paused', 'Paused (Approval)')], default='pending', max_length=20)),
                ('input_data', models.JSONField(default=dict, help_text='Data passed to this node')),
                ('output_data', models.JSONField(blank=True, help_text='Data produced by this node', null=True)),
                ('execution_details', models.JSONField(default=dict, help_text='Node-specific execution details')),
                ('error_details', models.JSONField(blank=True, help_text='Error information if node failed', null=True)),
                ('duration_ms', models.PositiveIntegerField(blank=True, help_text='Execution duration in milliseconds', null=True)),
                ('execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='workflows.workflowexecution')),
            ],
            options={
                'db_table': 'workflows_execution_log',
                'ordering': ['started_at'],
            },
        ),
        migrations.CreateModel(
            name='WorkflowSchedule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('cron_expression', models.CharField(help_text='Cron expression for scheduling', max_length=255)),
                ('timezone', models.CharField(default='UTC', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_execution', models.DateTimeField(blank=True, null=True)),
                ('next_execution', models.DateTimeField(blank=True, null=True)),
                ('execution_count', models.PositiveIntegerField(default=0)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='workflows.workflow')),
            ],
            options={
                'db_table': 'workflows_schedule',
            },
        ),
        migrations.CreateModel(
            name='WorkflowTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('communication', 'Communication'), ('crm', 'CRM & Sales'), ('marketing', 'Marketing'), ('automation', 'Automation'), ('analytics', 'Analytics'), ('integration', 'Integration'), ('custom', 'Custom')], max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_system_template', models.BooleanField(default=False, help_text='Built-in system template')),
                ('is_active', models.BooleanField(default=True)),
                ('visibility', models.CharField(choices=[('private', 'Private'), ('internal', 'Internal (Team)'), ('public', 'Public')], default='public', max_length=10)),
                ('template_definition', models.JSONField(help_text='Workflow template structure')),
                ('default_config', models.JSONField(default=dict, help_text='Default configuration values')),
                ('required_fields', models.JSONField(default=list, help_text='Fields that must be configured by user')),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('tags', models.JSONField(default=list)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'workflows_template',
            },
        ),
        migrations.CreateModel(
            name='WorkflowTrigger',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('trigger_type', models.CharField(choices=[('manual', 'Manual'), ('record_created', 'Record Created'), ('record_updated', 'Record Updated'), ('record_deleted', 'Record Deleted'), ('field_changed', 'Field Changed'), ('scheduled', 'Scheduled'), ('webhook', 'Webhook'), ('api_endpoint', 'API Endpoint'), ('form_submitted', 'Form Submitted'), ('email_received', 'Email Received'), ('message_received', 'Message Received'), ('status_changed', 'Status Changed'), ('date_reached', 'Date Reached'), ('condition_met', 'Condition Met'), ('pipeline_stage_changed', 'Pipeline Stage Changed'), ('engagement_threshold', 'Engagement Threshold'), ('workflow_completed', 'Workflow Completed')], max_length=30)),
                ('name', models.CharField(help_text='Human-readable trigger name', max_length=255)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('trigger_config', models.JSONField(default=dict, help_text='Trigger-specific configuration')),
                ('conditions', models.JSONField(default=list, help_text='Conditions that must be met')),
                ('max_executions_per_minute', models.PositiveIntegerField(default=10)),
                ('max_executions_per_hour', models.PositiveIntegerField(default=100)),
                ('max_executions_per_day', models.PositiveIntegerField(default=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_triggered_at', models.DateTimeField(blank=True, null=True)),
                ('execution_count', models.PositiveIntegerField(default=0)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='triggers', to='workflows.workflow')),
            ],
            options={
                'db_table': 'workflows_trigger',
            },
        ),
        migrations.CreateModel(
            name='WorkflowVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('version_number', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('workflow_definition', models.JSONField(help_text='Workflow definition at this version')),
                ('change_summary', models.TextField(blank=True, help_text='Summary of changes in this version')),
                ('is_active', models.BooleanField(default=False, help_text='Whether this version is currently active')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('workflow', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='workflows.workflow')),
            ],
            options={
                'db_table': 'workflows_version',
                'ordering': ['-version_number'],
            },
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['status', 'trigger_type'], name='workflows_w_status_6c6375_idx'),
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['created_by', 'status'], name='workflows_w_created_e9b9ae_idx'),
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['category', 'visibility'], name='workflows_w_categor_98cd55_idx'),
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['uses_reusable_workflows'], name='workflows_w_uses_re_209e11_idx'),
        ),
        migrations.AddIndex(
            model_name='workflow',
            index=models.Index(fields=['last_executed_at'], name='workflows_w_last_ex_70ca98_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowanalytics',
            index=models.Index(fields=['workflow', 'date'], name='workflows_a_workflo_651ed2_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowanalytics',
            index=models.Index(fields=['date'], name='workflows_a_date_7a68e7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workflowanalytics',
            unique_together={('workflow', 'date')},
        ),
        migrations.AddIndex(
            model_name='workflowexecution',
            index=models.Index(fields=['workflow', 'status'], name='workflows_e_workflo_4320c4_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowexecution',
            index=models.Index(fields=['started_at'], name='workflows_e_started_f4f2e8_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowevent',
            index=models.Index(fields=['workflow', 'event_type'], name='workflows_e_workflo_9ecff8_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowevent',
            index=models.Index(fields=['created_at'], name='workflows_e_created_d1c898_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowevent',
            index=models.Index(fields=['execution'], name='workflows_e_executi_22cdc3_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowapproval',
            index=models.Index(fields=['assigned_to', 'status'], name='workflows_a_assigne_f4eb24_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowapproval',
            index=models.Index(fields=['created_at'], name='workflows_a_created_965edf_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowapproval',
            index=models.Index(fields=['timeout_at'], name='workflows_a_timeout_fb8f53_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowexecutionlog',
            index=models.Index(fields=['execution', 'node_id'], name='workflows_e_executi_99f454_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowexecutionlog',
            index=models.Index(fields=['started_at'], name='workflows_e_started_fb14a4_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowschedule',
            index=models.Index(fields=['is_active', 'next_execution'], name='workflows_s_is_acti_db00a2_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtemplate',
            index=models.Index(fields=['category', 'is_active'], name='workflows_t_categor_0c5f63_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtemplate',
            index=models.Index(fields=['is_system_template'], name='workflows_t_is_syst_83d8d6_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtrigger',
            index=models.Index(fields=['workflow', 'is_active'], name='workflows_t_workflo_32a3aa_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtrigger',
            index=models.Index(fields=['trigger_type', 'is_active'], name='workflows_t_trigger_dc0b35_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowtrigger',
            index=models.Index(fields=['last_triggered_at'], name='workflows_t_last_tr_7e2950_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowversion',
            index=models.Index(fields=['workflow', 'version_number'], name='workflows_v_workflo_f56616_idx'),
        ),
        migrations.AddIndex(
            model_name='workflowversion',
            index=models.Index(fields=['created_at'], name='workflows_v_created_8db04b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workflowversion',
            unique_together={('workflow', 'version_number')},
        ),
    ]
